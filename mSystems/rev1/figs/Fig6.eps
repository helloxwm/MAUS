%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Acr996092749698048-27073.tmp.pdf
%%Creator: (Adobe Acrobat 11.0.18)
%%For: martijm
%%CreationDate: 15/12/16, 17:33
%%BoundingBox: -1 0 457 413
%%HiResBoundingBox: 0 0 456.7915 412.0817
%%CropBox: 0 0 456.7915 412.0817
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 822 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2016-12-15T17:31:14+01:00"
   xmp:CreateDate="2016-12-15T17:31:14+01:00"
   xmp:MetadataDate="2016-12-15T17:31:14+01:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:278c2049-5a06-9c42-9983-5918124ef60f"
   xmpMM:InstanceID="uuid:a02730da-ad1b-514e-86f3-f6b900344583"
   pdf:Producer="pdfTeX-1.40.17"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -412.082 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-05 0 mo
-1.52588e-05 412.082 li
456.792 412.082 li
456.792 0 li
cp
clp
gsave
-1.16826e-05 3.05175e-05 mo
456.792 3.05175e-05 li
456.792 204.728 li
-1.16826e-05 204.728 li
cp
clp
gsave
-1.00232 204.728 mo
456.792 204.728 li
456.792 3.05175e-05 li
-1.00232 3.05175e-05 li
cp
clp
-1.16826e-05 3.05175e-05 mo
460.637 3.05175e-05 li
460.637 204.728 li
-1.16826e-05 204.728 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.753512 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
-1.16826e-05 3.05175e-05 mo
460.637 3.05175e-05 li
460.637 204.728 li
-1.16826e-05 204.728 li
cp
@
grestore
grestore
gsave
27.4321 22.4973 mo
446.557 22.4973 li
446.557 178.225 li
27.4321 178.225 li
cp
clp
gsave
27.4321 178.426 mo
447.55 178.426 li
447.55 22.0367 li
27.4321 22.0367 li
cp
clp
27.4321 22.4973 mo
446.557 22.4973 li
446.557 178.225 li
27.4321 178.225 li
cp
false sop
0 0 0 0 cmyk
f
.753512 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
45.8007 156.672 mo
446.557 156.672 li
.0120546 .00628672 .00628672 0 cmyk
@
45.8007 127.735 mo
446.557 127.735 li
@
44.9484 98.7954 mo
446.557 98.7954 li
@
44.5204 69.8506 mo
446.557 69.8506 li
@
44.9484 40.9107 mo
446.557 40.9107 li
@
103.622 170.965 mo
103.622 22.4973 li
@
220.103 170.965 mo
220.103 22.4973 li
@
336.584 170.11 mo
336.584 22.4973 li
@
.30567 lw
44.7955 171.954 mo
446.557 171.148 li
.0886549 .0642405 .0690623 0 cmyk
@
45.3728 142.208 mo
446.557 142.208 li
@
46.2279 113.26 mo
446.557 113.26 li
@
44.5204 84.323 mo
446.557 84.323 li
@
44.0932 55.3831 mo
446.557 55.3831 li
@
45.3728 26.4433 mo
446.557 26.4433 li
@
45.3813 178.226 mo
45.3813 22.4973 li
@
161.862 178.226 mo
161.862 22.4973 li
@
278.344 178.226 mo
278.344 22.4973 li
@
394.833 178.226 mo
394.833 22.4973 li
@
.753512 lw
1 ml
46.4838 77.7475 mo
46.6033 77.7475 li
.75021 .679683 .670222 .90164 cmyk
@
46.5393 77.7475 mo
46.5393 106.615 li
@
46.4838 106.615 mo
46.6033 106.615 li
@
47.6496 79.7799 mo
47.7641 79.7799 li
@
47.7058 79.7799 mo
47.7058 107.368 li
@
47.6496 107.368 mo
47.7641 107.368 li
@
48.8133 77.7617 mo
48.9271 77.7617 li
@
48.8716 77.7617 mo
48.8716 104.524 li
@
48.8133 104.524 mo
48.9271 104.524 li
@
49.9798 83.6818 mo
50.0936 83.6818 li
@
50.0381 83.6818 mo
50.0381 108.32 li
@
49.9798 108.32 mo
50.0936 108.32 li
@
51.1457 92.3699 mo
51.2601 92.3699 li
@
51.2039 92.3699 mo
51.2039 114.832 li
@
51.1457 114.832 mo
51.2601 114.832 li
@
52.3122 103.252 mo
52.4259 103.252 li
@
52.3676 103.252 mo
52.3676 121.99 li
@
52.3122 121.99 mo
52.4259 121.99 li
@
53.4702 103.452 mo
53.5924 103.452 li
@
53.5341 103.452 mo
53.5341 123.434 li
@
53.4702 123.434 mo
53.5924 123.434 li
@
54.6367 88.9933 mo
54.7582 88.9933 li
@
54.695 88.9933 mo
54.695 112.33 li
@
54.6367 112.33 mo
54.7582 112.33 li
@
55.8025 81.016 mo
55.9219 81.016 li
@
55.8579 81.016 mo
55.8579 107.809 li
@
55.8025 107.809 mo
55.9219 107.809 li
@
56.969 78.0084 mo
57.0828 78.0084 li
@
57.0245 78.0084 mo
57.0245 104.666 li
@
56.969 104.666 mo
57.0828 104.666 li
@
58.1348 71.8971 mo
58.2493 71.8971 li
@
58.191 71.8971 mo
58.191 100.773 li
@
58.1348 100.773 mo
58.2493 100.773 li
@
59.2985 96.0522 mo
59.4122 96.0522 li
@
59.3568 96.0522 mo
59.3568 116.02 li
@
59.2985 116.02 mo
59.4122 116.02 li
@
60.465 110.417 mo
60.5788 110.417 li
@
60.5233 110.417 mo
60.5233 126.136 li
@
60.465 126.136 mo
60.5788 126.136 li
@
61.6259 104.46 mo
61.7453 104.46 li
@
61.6891 104.46 mo
61.6891 121.507 li
@
61.6259 121.507 mo
61.7453 121.507 li
@
62.7888 107.426 mo
62.9111 107.426 li
@
62.8528 107.426 mo
62.8528 123.617 li
@
62.7888 123.617 mo
62.9111 123.617 li
@
63.9553 81.2712 mo
64.0776 81.2712 li
@
64.0136 81.2712 mo
64.0136 106.21 li
@
63.9553 106.21 mo
64.0776 106.21 li
@
65.1219 68.9037 mo
65.2356 68.9037 li
@
65.1802 68.9037 mo
65.1802 98.4904 li
@
65.1219 98.4904 mo
65.2356 98.4904 li
@
66.2877 60.8511 mo
66.4014 60.8511 li
@
66.3431 60.8511 mo
66.3431 93.3729 li
@
66.2877 93.3729 mo
66.4014 93.3729 li
@
67.4542 52.9811 mo
67.5679 52.9811 li
@
67.5097 52.9811 mo
67.5097 90.4847 li
@
67.4542 90.4847 mo
67.5679 90.4847 li
@
68.62 69.2172 mo
68.7345 69.2172 li
@
68.6762 69.2172 mo
68.6762 100.195 li
@
68.62 100.195 mo
68.7345 100.195 li
@
69.7837 71.2915 mo
69.8974 71.2915 li
@
69.842 71.2915 mo
69.842 102.719 li
@
69.7837 102.719 mo
69.8974 102.719 li
@
70.9445 137.06 mo
71.0639 137.06 li
@
71.0085 137.06 mo
71.0085 146.196 li
@
70.9445 146.196 mo
71.0639 146.196 li
@
72.111 135.725 mo
72.2305 135.725 li
@
72.1665 135.725 mo
72.1665 145.179 li
@
72.111 145.179 mo
72.2305 145.179 li
@
73.274 139.301 mo
73.3877 139.301 li
@
73.3323 139.301 mo
73.3323 147.44 li
@
73.274 147.44 mo
73.3877 147.44 li
@
74.4405 143.877 mo
74.5543 143.877 li
@
74.4988 143.877 mo
74.4988 150.775 li
@
74.4405 150.775 mo
74.5543 150.775 li
@
75.6071 144.204 mo
75.7208 144.204 li
@
75.6653 144.204 mo
75.6653 151.058 li
@
75.6071 151.058 mo
75.7208 151.058 li
@
76.7729 142.13 mo
76.8866 142.13 li
@
76.8283 142.13 mo
76.8283 149.686 li
@
76.7729 149.686 mo
76.8866 149.686 li
@
77.9394 128.999 mo
78.0531 128.999 li
@
77.9948 128.999 mo
77.9948 140.765 li
@
77.9394 140.765 mo
78.0531 140.765 li
@
79.0974 73.724 mo
79.2196 73.724 li
@
79.1614 73.724 mo
79.1614 104.974 li
@
79.0974 104.974 mo
79.2196 104.974 li
@
80.2632 67.8594 mo
80.3826 67.8594 li
@
80.3186 67.8594 mo
80.3186 99.9398 li
@
80.2632 99.9398 mo
80.3826 99.9398 li
@
81.4297 56.8326 mo
81.5491 56.8326 li
@
81.4852 56.8326 mo
81.4852 92.8092 li
@
81.4297 92.8092 mo
81.5491 92.8092 li
@
82.5962 61.6309 mo
82.71 61.6309 li
@
82.6517 61.6309 mo
82.6517 95.0996 li
@
82.5962 95.0996 mo
82.71 95.0996 li
@
83.7592 74.1349 mo
83.8729 74.1349 li
@
83.8175 74.1349 mo
83.8175 103.38 li
@
83.7592 103.38 mo
83.8729 103.38 li
@
84.9257 111.1 mo
85.0395 111.1 li
@
84.984 111.1 mo
84.984 128.296 li
@
84.9257 128.296 mo
85.0395 128.296 li
@
86.0922 111.419 mo
86.206 111.419 li
@
86.1505 111.419 mo
86.1505 128.005 li
@
86.0922 128.005 mo
86.206 128.005 li
@
87.2495 93.031 mo
87.3718 93.031 li
@
87.3135 93.031 mo
87.3135 115.67 li
@
87.2495 115.67 mo
87.3718 115.67 li
@
88.416 92.4758 mo
88.5383 92.4758 li
@
88.48 92.4758 mo
88.48 116.431 li
@
88.416 116.431 mo
88.5383 116.431 li
@
89.5826 129.071 mo
89.7048 129.071 li
@
89.6408 129.071 mo
89.6408 140.778 li
@
89.5826 140.778 mo
89.7048 140.778 li
@
90.7484 77.5058 mo
90.8621 77.5058 li
@
90.8038 77.5058 mo
90.8038 106.424 li
@
90.7484 106.424 mo
90.8621 106.424 li
@
91.9149 81.1738 mo
92.0286 81.1738 li
@
91.9703 81.1738 mo
91.9703 109.217 li
@
91.9149 109.217 mo
92.0286 109.217 li
@
93.0814 74.4484 mo
93.1952 74.4484 li
@
93.1369 74.4484 mo
93.1369 102.861 li
@
93.0814 102.861 mo
93.1952 102.861 li
@
94.2444 62.7477 mo
94.3581 62.7477 li
@
94.3027 62.7477 mo
94.3027 94.6724 li
@
94.2444 94.6724 mo
94.3581 94.6724 li
@
95.4109 45.8924 mo
95.5246 45.8924 li
@
95.4692 45.8924 mo
95.4692 83.7123 li
@
95.4109 83.7123 mo
95.5246 83.7123 li
@
96.5717 57.6216 mo
96.6912 57.6216 li
@
96.6357 57.6216 mo
96.6357 93.4781 li
@
96.5717 93.4781 mo
96.6912 93.4781 li
@
97.7347 67.5097 mo
97.857 67.5097 li
@
97.793 67.5097 mo
97.793 100.792 li
@
97.7347 100.792 mo
97.857 100.792 li
@
98.9012 144.824 mo
99.015 144.824 li
@
98.9595 144.824 mo
98.9595 152.33 li
@
98.9012 152.33 mo
99.015 152.33 li
@
100.068 147.198 mo
100.181 147.198 li
@
100.126 147.198 mo
100.126 153.76 li
@
100.068 153.76 mo
100.181 153.76 li
@
101.234 150.916 mo
101.347 150.916 li
@
101.289 150.916 mo
101.289 156.148 li
@
101.234 156.148 mo
101.347 156.148 li
@
102.4 143.735 mo
102.514 143.735 li
@
102.456 143.735 mo
102.456 151.236 li
@
102.4 151.236 mo
102.514 151.236 li
@
103.567 142.719 mo
103.68 142.719 li
@
103.622 142.719 mo
103.622 150.305 li
@
103.567 150.305 mo
103.68 150.305 li
@
104.724 138.476 mo
104.843 138.476 li
@
104.788 138.476 mo
104.788 147.076 li
@
104.724 147.076 mo
104.843 147.076 li
@
105.89 138.34 mo
106.01 138.34 li
@
105.946 138.34 mo
105.946 146.97 li
@
105.89 146.97 mo
106.01 146.97 li
@
107.057 142.277 mo
107.176 142.277 li
@
107.112 142.277 mo
107.112 149.714 li
@
107.057 149.714 mo
107.176 149.714 li
@
108.22 143.608 mo
108.334 143.608 li
@
108.278 143.608 mo
108.278 150.539 li
@
108.22 150.539 mo
108.334 150.539 li
@
109.386 147.304 mo
109.5 147.304 li
@
109.445 147.304 mo
109.445 153.276 li
@
109.386 153.276 mo
109.5 153.276 li
@
110.553 146.168 mo
110.667 146.168 li
@
110.611 146.168 mo
110.611 152.721 li
@
110.553 152.721 mo
110.667 152.721 li
@
111.719 87.6278 mo
111.832 87.6278 li
@
111.774 87.6278 mo
111.774 112.985 li
@
111.719 112.985 mo
111.832 112.985 li
@
112.877 79.7386 mo
112.999 79.7386 li
@
112.941 79.7386 mo
112.941 107.354 li
@
112.877 107.354 mo
112.999 107.354 li
@
114.043 81.6992 mo
114.166 81.6992 li
@
114.107 81.6992 mo
114.107 108.89 li
@
114.043 108.89 mo
114.166 108.89 li
@
115.209 80.7964 mo
115.328 80.7964 li
@
115.265 80.7964 mo
115.265 108.384 li
@
115.209 108.384 mo
115.328 108.384 li
@
116.376 78.0254 mo
116.489 78.0254 li
@
116.431 78.0254 mo
116.431 106.765 li
@
116.376 106.765 mo
116.489 106.765 li
@
117.542 128.446 mo
117.656 128.446 li
@
117.598 128.446 mo
117.598 140.714 li
@
117.542 140.714 mo
117.656 140.714 li
@
118.705 137.04 mo
118.82 137.04 li
@
118.763 137.04 mo
118.763 146.865 li
@
118.705 146.865 mo
118.82 146.865 li
@
119.872 114.562 mo
119.985 114.562 li
@
119.93 114.562 mo
119.93 130.471 li
@
119.872 130.471 mo
119.985 130.471 li
@
121.038 119.702 mo
121.152 119.702 li
@
121.096 119.702 mo
121.096 134.8 li
@
121.038 134.8 mo
121.152 134.8 li
@
122.196 117.711 mo
122.318 117.711 li
@
122.259 117.711 mo
122.259 134.353 li
@
122.196 134.353 mo
122.318 134.353 li
@
123.362 113.988 mo
123.484 113.988 li
@
123.42 113.988 mo
123.42 130.921 li
@
123.362 130.921 mo
123.484 130.921 li
@
124.528 114.179 mo
124.642 114.179 li
@
124.587 114.179 mo
124.587 130.998 li
@
124.528 130.998 mo
124.642 130.998 li
@
125.694 151.605 mo
125.809 151.605 li
@
125.75 151.605 mo
125.75 156.475 li
@
125.694 156.475 mo
125.809 156.475 li
@
126.861 152.998 mo
126.975 152.998 li
@
126.916 152.998 mo
126.916 157.619 li
@
126.861 157.619 mo
126.975 157.619 li
@
128.027 156.261 mo
128.141 156.261 li
@
128.083 156.261 mo
128.083 159.952 li
@
128.027 159.952 mo
128.141 159.952 li
@
129.19 155.459 mo
129.305 155.459 li
@
129.249 155.459 mo
129.249 159.338 li
@
129.19 159.338 mo
129.305 159.338 li
@
130.351 121.857 mo
130.471 121.857 li
@
130.415 121.857 mo
130.415 136.194 li
@
130.351 136.194 mo
130.471 136.194 li
@
131.518 125.431 mo
131.637 125.431 li
@
131.573 125.431 mo
131.573 138.626 li
@
131.518 138.626 mo
131.637 138.626 li
@
132.681 122.04 mo
132.803 122.04 li
@
132.74 122.04 mo
132.74 135.766 li
@
132.681 135.766 mo
132.803 135.766 li
@
133.847 111.241 mo
133.961 111.241 li
@
133.905 111.241 mo
133.905 127.983 li
@
133.847 127.983 mo
133.961 127.983 li
@
135.014 111.797 mo
135.127 111.797 li
@
135.072 111.797 mo
135.072 127.85 li
@
135.014 127.85 mo
135.127 127.85 li
@
136.179 79.1607 mo
136.294 79.1607 li
@
136.236 79.1607 mo
136.236 107.154 li
@
136.179 107.154 mo
136.294 107.154 li
@
137.346 76.4729 mo
137.46 76.4729 li
@
137.401 76.4729 mo
137.401 105.718 li
@
137.346 105.718 mo
137.46 105.718 li
@
138.504 111.683 mo
138.626 111.683 li
@
138.568 111.683 mo
138.568 129.271 li
@
138.504 129.271 mo
138.626 129.271 li
@
139.67 107.304 mo
139.79 107.304 li
@
139.734 107.304 mo
139.734 126.519 li
@
139.67 126.519 mo
139.79 126.519 li
@
140.836 110.68 mo
140.956 110.68 li
@
140.892 110.68 mo
140.892 128.574 li
@
140.836 128.574 mo
140.956 128.574 li
@
142.003 90.179 mo
142.114 90.179 li
@
142.058 90.179 mo
142.058 113.78 li
@
142.003 113.78 mo
142.114 113.78 li
@
143.166 80.291 mo
143.28 80.291 li
@
143.225 80.291 mo
143.225 107.595 li
@
143.166 107.595 mo
143.28 107.595 li
@
144.332 87.6413 mo
144.446 87.6413 li
@
144.391 87.6413 mo
144.391 112.794 li
@
144.332 112.794 mo
144.446 112.794 li
@
145.499 97.5435 mo
145.613 97.5435 li
@
145.557 97.5435 mo
145.557 118.558 li
@
145.499 118.558 mo
145.613 118.558 li
@
146.665 109.153 mo
146.779 109.153 li
@
146.721 109.153 mo
146.721 126.575 li
@
146.665 126.575 mo
146.779 126.575 li
@
147.823 149.203 mo
147.945 149.203 li
@
147.887 149.203 mo
147.887 154.584 li
@
147.823 154.584 mo
147.945 154.584 li
@
148.989 141.475 mo
149.111 141.475 li
@
149.045 141.475 mo
149.045 148.953 li
@
148.989 148.953 mo
149.111 148.953 li
@
150.156 131.601 mo
150.269 131.601 li
@
150.211 131.601 mo
150.211 142.364 li
@
150.156 142.364 mo
150.269 142.364 li
@
151.321 131.282 mo
151.435 131.282 li
@
151.377 131.282 mo
151.377 142.158 li
@
151.321 142.158 mo
151.435 142.158 li
@
152.488 138.299 mo
152.599 138.299 li
@
152.543 138.299 mo
152.543 147.012 li
@
152.488 147.012 mo
152.599 147.012 li
@
153.652 142.208 mo
153.765 142.208 li
@
153.71 142.208 mo
153.71 149.467 li
@
153.652 149.467 mo
153.765 149.467 li
@
154.817 148.045 mo
154.931 148.045 li
@
154.876 148.045 mo
154.876 153.709 li
@
154.817 153.709 mo
154.931 153.709 li
@
155.975 147.809 mo
156.098 147.809 li
@
156.042 147.809 mo
156.042 153.618 li
@
155.975 153.618 mo
156.098 153.618 li
@
157.142 144.327 mo
157.264 144.327 li
@
157.2 144.327 mo
157.2 151.308 li
@
157.142 151.308 mo
157.264 151.308 li
@
158.308 142.25 mo
158.43 142.25 li
@
158.366 142.25 mo
158.366 149.686 li
@
158.308 149.686 mo
158.43 149.686 li
@
159.474 91.7507 mo
159.588 91.7507 li
@
159.53 91.7507 mo
159.53 114.876 li
@
159.474 114.876 mo
159.588 114.876 li
@
160.641 92.6173 mo
160.755 92.6173 li
@
160.696 92.6173 mo
160.696 115.009 li
@
160.641 115.009 mo
160.755 115.009 li
@
161.807 82.7427 mo
161.92 82.7427 li
@
161.862 82.7427 mo
161.862 107.646 li
@
161.807 107.646 mo
161.92 107.646 li
@
162.973 92.4758 mo
163.084 92.4758 li
@
163.029 92.4758 mo
163.029 114.115 li
@
162.973 114.115 mo
163.084 114.115 li
@
164.131 96.7993 mo
164.251 96.7993 li
@
164.195 96.7993 mo
164.195 117.455 li
@
164.131 117.455 mo
164.251 117.455 li
@
165.297 109.991 mo
165.416 109.991 li
@
165.361 109.991 mo
165.361 127.991 li
@
165.297 127.991 mo
165.416 127.991 li
@
166.461 106.218 mo
166.583 106.218 li
@
166.519 106.218 mo
166.519 125.311 li
@
166.461 125.311 mo
166.583 125.311 li
@
167.627 154.334 mo
167.741 154.334 li
@
167.685 154.334 mo
167.685 158.444 li
@
167.627 158.444 mo
167.741 158.444 li
@
168.793 155.614 mo
168.907 155.614 li
@
168.851 155.614 mo
168.851 159.56 li
@
168.793 159.56 mo
168.907 159.56 li
@
169.96 154.379 mo
170.073 154.379 li
@
170.015 154.379 mo
170.015 158.727 li
@
169.96 158.727 mo
170.073 158.727 li
@
171.126 150.114 mo
171.24 150.114 li
@
171.181 150.114 mo
171.181 155.601 li
@
171.126 155.601 mo
171.24 155.601 li
@
172.292 150.447 mo
172.406 150.447 li
@
172.347 150.447 mo
172.347 155.779 li
@
172.292 155.779 mo
172.406 155.779 li
@
173.45 148.625 mo
173.569 148.625 li
@
173.514 148.625 mo
173.514 154.456 li
@
173.45 154.456 mo
173.569 154.456 li
@
174.616 148.947 mo
174.736 148.947 li
@
174.672 148.947 mo
174.672 154.54 li
@
174.616 154.54 mo
174.736 154.54 li
@
175.782 148.848 mo
175.897 148.848 li
@
175.838 148.848 mo
175.838 154.235 li
@
175.782 154.235 mo
175.897 154.235 li
@
176.946 150.88 mo
177.06 150.88 li
@
177.004 150.88 mo
177.004 155.892 li
@
176.946 155.892 mo
177.06 155.892 li
@
178.112 153.824 mo
178.226 153.824 li
@
178.171 153.824 mo
178.171 158.003 li
@
178.112 158.003 mo
178.226 158.003 li
@
179.278 151.036 mo
179.393 151.036 li
@
179.336 151.036 mo
179.336 156.162 li
@
179.278 156.162 mo
179.393 156.162 li
@
180.445 149.786 mo
180.558 149.786 li
@
180.5 149.786 mo
180.5 155.314 li
@
180.445 155.314 mo
180.558 155.314 li
@
181.603 136.144 mo
181.725 136.144 li
@
181.667 136.144 mo
181.667 146.018 li
@
181.603 146.018 mo
181.725 146.018 li
@
182.769 134.9 mo
182.891 134.9 li
@
182.827 134.9 mo
182.827 145.038 li
@
182.769 145.038 mo
182.891 145.038 li
@
183.935 135.811 mo
184.054 135.811 li
@
183.99 135.811 mo
183.99 145.563 li
@
183.935 145.563 mo
184.054 145.563 li
@
185.102 109.464 mo
185.215 109.464 li
@
185.157 109.464 mo
185.157 127.202 li
@
185.102 127.202 mo
185.215 127.202 li
@
186.267 113.971 mo
186.382 113.971 li
@
186.323 113.971 mo
186.323 129.313 li
@
186.267 129.313 mo
186.382 129.313 li
@
187.431 113.952 mo
187.545 113.952 li
@
187.489 113.952 mo
187.489 129.668 li
@
187.431 129.668 mo
187.545 129.668 li
@
188.598 91.3875 mo
188.711 91.3875 li
@
188.656 91.3875 mo
188.656 112.963 li
@
188.598 112.963 mo
188.711 112.963 li
@
189.758 89.0992 mo
189.878 89.0992 li
@
189.822 89.0992 mo
189.822 111.911 li
@
189.758 111.911 mo
189.878 111.911 li
@
190.921 95.8936 mo
191.044 95.8936 li
@
190.985 95.8936 mo
190.985 117.861 li
@
190.921 117.861 mo
191.044 117.861 li
@
192.088 101.986 mo
192.21 101.986 li
@
192.146 101.986 mo
192.146 121.771 li
@
192.088 121.771 mo
192.21 121.771 li
@
193.254 96.1716 mo
193.368 96.1716 li
@
193.313 96.1716 mo
193.313 117.392 li
@
193.254 117.392 mo
193.368 117.392 li
@
194.42 138.74 mo
194.534 138.74 li
@
194.476 138.74 mo
194.476 147.44 li
@
194.42 147.44 mo
194.534 147.44 li
@
195.587 140.581 mo
195.7 140.581 li
@
195.642 140.581 mo
195.642 148.478 li
@
195.587 148.478 mo
195.7 148.478 li
@
196.753 70.6446 mo
196.867 70.6446 li
@
196.809 70.6446 mo
196.809 101.148 li
@
196.753 101.148 mo
196.867 101.148 li
@
197.916 68.4203 mo
198.03 68.4203 li
@
197.975 68.4203 mo
197.975 99.7479 li
@
197.916 99.7479 mo
198.03 99.7479 li
@
199.077 65.3494 mo
199.196 65.3494 li
@
199.141 65.3494 mo
199.141 97.4099 li
@
199.077 97.4099 mo
199.196 97.4099 li
@
200.244 63.6078 mo
200.363 63.6078 li
@
200.299 63.6078 mo
200.299 97.7156 li
@
200.244 97.7156 mo
200.363 97.7156 li
@
201.407 71.1358 mo
201.52 71.1358 li
@
201.465 71.1358 mo
201.465 102.591 li
@
201.407 102.591 mo
201.52 102.591 li
@
202.573 133.264 mo
202.687 133.264 li
@
202.631 133.264 mo
202.631 143.196 li
@
202.573 143.196 mo
202.687 143.196 li
@
203.74 78.4278 mo
203.853 78.4278 li
@
203.798 78.4278 mo
203.798 106.104 li
@
203.74 106.104 mo
203.853 106.104 li
@
204.905 45.3316 mo
205.019 45.3316 li
@
204.961 45.3316 mo
204.961 83.3342 li
@
204.905 83.3342 mo
205.019 83.3342 li
@
206.072 37.9393 mo
206.186 37.9393 li
@
206.127 37.9393 mo
206.127 78.4726 li
@
206.072 78.4726 mo
206.186 78.4726 li
@
207.23 40.1139 mo
207.352 40.1139 li
@
207.294 40.1139 mo
207.294 79.8218 li
@
207.23 79.8218 mo
207.352 79.8218 li
@
208.396 47.2502 mo
208.515 47.2502 li
@
208.451 47.2502 mo
208.451 83.4841 li
@
208.396 83.4841 mo
208.515 83.4841 li
@
209.562 29.5782 mo
209.682 29.5782 li
@
209.618 29.5782 mo
209.618 73.0907 li
@
209.562 73.0907 mo
209.682 73.0907 li
@
210.729 61.7588 mo
210.842 61.7588 li
@
210.784 61.7588 mo
210.784 93.975 li
@
210.729 93.975 mo
210.842 93.975 li
@
211.892 60.7871 mo
212.005 60.7871 li
@
211.95 60.7871 mo
211.95 92.6813 li
@
211.892 92.6813 mo
212.005 92.6813 li
@
213.058 85.3253 mo
213.172 85.3253 li
@
213.117 85.3253 mo
213.117 110.772 li
@
213.058 110.772 mo
213.172 110.772 li
@
214.225 141.716 mo
214.338 141.716 li
@
214.283 141.716 mo
214.283 149.131 li
@
214.225 149.131 mo
214.338 149.131 li
@
215.382 135.233 mo
215.504 135.233 li
@
215.446 135.233 mo
215.446 144.497 li
@
215.382 144.497 mo
215.504 144.497 li
@
216.549 131.901 mo
216.671 131.901 li
@
216.613 131.901 mo
216.613 142.564 li
@
216.549 142.564 mo
216.671 142.564 li
@
217.715 137.273 mo
217.837 137.273 li
@
217.773 137.273 mo
217.773 146.073 li
@
217.715 146.073 mo
217.837 146.073 li
@
218.881 137.629 mo
218.995 137.629 li
@
218.936 137.629 mo
218.936 146.523 li
@
218.881 146.523 mo
218.995 146.523 li
@
220.047 137.607 mo
220.161 137.607 li
@
220.103 137.607 mo
220.103 146.245 li
@
220.047 146.245 mo
220.161 146.245 li
@
221.214 138.426 mo
221.328 138.426 li
@
221.269 138.426 mo
221.269 147.106 li
@
221.214 147.106 mo
221.328 147.106 li
@
222.377 129.304 mo
222.491 129.304 li
@
222.435 129.304 mo
222.435 140.273 li
@
222.377 140.273 mo
222.491 140.273 li
@
223.543 136.216 mo
223.657 136.216 li
@
223.602 136.216 mo
223.602 144.902 li
@
223.543 144.902 mo
223.657 144.902 li
@
224.704 142.486 mo
224.824 142.486 li
@
224.768 142.486 mo
224.768 149.636 li
@
224.704 149.636 mo
224.824 149.636 li
@
225.867 138.931 mo
225.989 138.931 li
@
225.926 138.931 mo
225.926 147.284 li
@
225.867 147.284 mo
225.989 147.284 li
@
227.034 136.982 mo
227.147 136.982 li
@
227.092 136.982 mo
227.092 145.913 li
@
227.034 145.913 mo
227.147 145.913 li
@
228.2 139.82 mo
228.314 139.82 li
@
228.259 139.82 mo
228.259 148.306 li
@
228.2 148.306 mo
228.314 148.306 li
@
229.366 145.093 mo
229.48 145.093 li
@
229.422 145.093 mo
229.422 151.961 li
@
229.366 151.961 mo
229.48 151.961 li
@
230.533 139.998 mo
230.646 139.998 li
@
230.588 139.998 mo
230.588 148.47 li
@
230.533 148.47 mo
230.646 148.47 li
@
231.699 141.084 mo
231.813 141.084 li
@
231.755 141.084 mo
231.755 148.903 li
@
231.699 148.903 mo
231.813 148.903 li
@
232.856 138.918 mo
232.976 138.918 li
@
232.92 138.918 mo
232.92 148.009 li
@
232.856 148.009 mo
232.976 148.009 li
@
234.023 143.73 mo
234.142 143.73 li
@
234.078 143.73 mo
234.078 151.399 li
@
234.023 151.399 mo
234.142 151.399 li
@
235.189 144.546 mo
235.309 144.546 li
@
235.245 144.546 mo
235.245 151.988 li
@
235.189 151.988 mo
235.309 151.988 li
@
236.352 139.009 mo
236.467 139.009 li
@
236.411 139.009 mo
236.411 148.2 li
@
236.352 148.2 mo
236.467 148.2 li
@
237.519 74.7178 mo
237.633 74.7178 li
@
237.577 74.7178 mo
237.577 104.696 li
@
237.519 104.696 mo
237.633 104.696 li
@
238.685 69.5506 mo
238.799 69.5506 li
@
238.744 69.5506 mo
238.744 102.322 li
@
238.685 102.322 mo
238.799 102.322 li
@
239.851 77.5115 mo
239.965 77.5115 li
@
239.907 77.5115 mo
239.907 106.501 li
@
239.851 106.501 mo
239.965 106.501 li
@
241.009 78.1392 mo
241.132 78.1392 li
@
241.073 78.1392 mo
241.073 106.702 li
@
241.009 106.702 mo
241.132 106.702 li
@
242.176 89.5684 mo
242.298 89.5684 li
@
242.24 89.5684 mo
242.24 112.194 li
@
242.176 112.194 mo
242.298 112.194 li
@
243.342 113.901 mo
243.461 113.901 li
@
243.398 113.901 mo
243.398 128.885 li
@
243.342 128.885 mo
243.461 128.885 li
@
244.508 108.187 mo
244.622 108.187 li
@
244.564 108.187 mo
244.564 125.212 li
@
244.508 125.212 mo
244.622 125.212 li
@
245.675 113.582 mo
245.788 113.582 li
@
245.73 113.582 mo
245.73 129.071 li
@
245.675 129.071 mo
245.788 129.071 li
@
246.838 105.435 mo
246.952 105.435 li
@
246.896 105.435 mo
246.896 122.901 li
@
246.838 122.901 mo
246.952 122.901 li
@
248.004 101.886 mo
248.118 101.886 li
@
248.062 101.886 mo
248.062 121.649 li
@
248.004 121.649 mo
248.118 121.649 li
@
249.171 115.815 mo
249.284 115.815 li
@
249.229 115.815 mo
249.229 132.147 li
@
249.171 132.147 mo
249.284 132.147 li
@
250.329 115.943 mo
250.45 115.943 li
@
250.392 115.943 mo
250.392 131.759 li
@
250.329 131.759 mo
250.45 131.759 li
@
251.494 100.167 mo
251.617 100.167 li
@
251.553 100.167 mo
251.553 119.461 li
@
251.494 119.461 mo
251.617 119.461 li
@
252.661 90.8209 mo
252.775 90.8209 li
@
252.719 90.8209 mo
252.719 114.043 li
@
252.661 114.043 mo
252.775 114.043 li
@
253.827 86.6887 mo
253.941 86.6887 li
@
253.883 86.6887 mo
253.883 110.744 li
@
253.827 110.744 mo
253.941 110.744 li
@
254.993 86.0695 mo
255.107 86.0695 li
@
255.049 86.0695 mo
255.049 111.513 li
@
254.993 111.513 mo
255.107 111.513 li
@
256.16 68.6201 mo
256.274 68.6201 li
@
256.215 68.6201 mo
256.215 97.6018 li
@
256.16 97.6018 mo
256.274 97.6018 li
@
257.323 102.186 mo
257.437 102.186 li
@
257.381 102.186 mo
257.381 122.546 li
@
257.323 122.546 mo
257.437 122.546 li
@
258.484 108.292 mo
258.603 108.292 li
@
258.548 108.292 mo
258.548 126.22 li
@
258.484 126.22 mo
258.603 126.22 li
@
259.65 99.3512 mo
259.77 99.3512 li
@
259.706 99.3512 mo
259.706 119.93 li
@
259.65 119.93 mo
259.77 119.93 li
@
260.814 78.6553 mo
260.935 78.6553 li
@
260.872 78.6553 mo
260.872 105.299 li
@
260.814 105.299 mo
260.935 105.299 li
@
261.98 91.3455 mo
262.093 91.3455 li
@
262.038 91.3455 mo
262.038 114.854 li
@
261.98 114.854 mo
262.093 114.854 li
@
263.146 103.899 mo
263.26 103.899 li
@
263.204 103.899 mo
263.204 123.781 li
@
263.146 123.781 mo
263.26 123.781 li
@
264.312 106.898 mo
264.426 106.898 li
@
264.368 106.898 mo
264.368 125.886 li
@
264.312 125.886 mo
264.426 125.886 li
@
265.478 108.762 mo
265.592 108.762 li
@
265.534 108.762 mo
265.534 126.975 li
@
265.478 126.975 mo
265.592 126.975 li
@
266.636 142.861 mo
266.759 142.861 li
@
266.7 142.861 mo
266.7 150.297 li
@
266.636 150.297 mo
266.759 150.297 li
@
267.803 143.649 mo
267.922 143.649 li
@
267.866 143.649 mo
267.866 150.816 li
@
267.803 150.816 mo
267.922 150.816 li
@
268.969 143.125 mo
269.088 143.125 li
@
269.024 143.125 mo
269.024 150.419 li
@
268.969 150.419 mo
269.088 150.419 li
@
270.135 140.29 mo
270.246 140.29 li
@
270.191 140.29 mo
270.191 148.37 li
@
270.135 148.37 mo
270.246 148.37 li
@
271.299 139.356 mo
271.413 139.356 li
@
271.357 139.356 mo
271.357 147.845 li
@
271.299 147.845 mo
271.413 147.845 li
@
272.465 145.649 mo
272.579 145.649 li
@
272.523 145.649 mo
272.523 152.33 li
@
272.465 152.33 mo
272.579 152.33 li
@
273.631 145.357 mo
273.745 145.357 li
@
273.69 145.357 mo
273.69 151.777 li
@
273.631 151.777 mo
273.745 151.777 li
@
274.797 141.952 mo
274.912 141.952 li
@
274.853 141.952 mo
274.853 149.622 li
@
274.797 149.622 mo
274.912 149.622 li
@
275.955 140.615 mo
276.077 140.615 li
@
276.019 140.615 mo
276.019 148.77 li
@
275.955 148.77 mo
276.077 148.77 li
@
277.122 146.309 mo
277.244 146.309 li
@
277.177 146.309 mo
277.177 152.793 li
@
277.122 152.793 mo
277.244 152.793 li
@
278.288 148.542 mo
278.402 148.542 li
@
278.344 148.542 mo
278.344 154.229 li
@
278.288 154.229 mo
278.402 154.229 li
@
279.454 151.399 mo
279.568 151.399 li
@
279.509 151.399 mo
279.509 156.239 li
@
279.454 156.239 mo
279.568 156.239 li
@
280.62 105.158 mo
280.731 105.158 li
@
280.676 105.158 mo
280.676 124.423 li
@
280.62 124.423 mo
280.731 124.423 li
@
281.784 102.584 mo
281.898 102.584 li
@
281.842 102.584 mo
281.842 123.576 li
@
281.784 123.576 mo
281.898 123.576 li
@
282.95 104.538 mo
283.064 104.538 li
@
283.008 104.538 mo
283.008 123.876 li
@
282.95 123.876 mo
283.064 123.876 li
@
284.108 100.418 mo
284.23 100.418 li
@
284.175 100.418 mo
284.175 122.473 li
@
284.108 122.473 mo
284.23 122.473 li
@
285.275 93.9693 mo
285.397 93.9693 li
@
285.333 93.9693 mo
285.333 117.547 li
@
285.275 117.547 mo
285.397 117.547 li
@
286.44 143.196 mo
286.563 143.196 li
@
286.499 143.196 mo
286.499 150.825 li
@
286.44 150.825 mo
286.563 150.825 li
@
287.607 113.232 mo
287.721 113.232 li
@
287.662 113.232 mo
287.662 130.109 li
@
287.607 130.109 mo
287.721 130.109 li
@
288.773 99.3207 mo
288.887 99.3207 li
@
288.829 99.3207 mo
288.829 121.032 li
@
288.773 121.032 mo
288.887 121.032 li
@
289.939 99.4707 mo
290.053 99.4707 li
@
289.995 99.4707 mo
289.995 120.208 li
@
289.939 120.208 mo
290.053 120.208 li
@
291.106 103.985 mo
291.217 103.985 li
@
291.161 103.985 mo
291.161 123.029 li
@
291.106 123.029 mo
291.217 123.029 li
@
292.264 103.197 mo
292.383 103.197 li
@
292.328 103.197 mo
292.328 123.007 li
@
292.264 123.007 mo
292.383 123.007 li
@
293.429 124.118 mo
293.549 124.118 li
@
293.493 124.118 mo
293.493 138.29 li
@
293.429 138.29 mo
293.549 138.29 li
@
294.593 126.028 mo
294.715 126.028 li
@
294.651 126.028 mo
294.651 138.896 li
@
294.593 138.896 mo
294.715 138.896 li
@
295.76 127.477 mo
295.873 127.477 li
@
295.818 127.477 mo
295.818 140.048 li
@
295.76 140.048 mo
295.873 140.048 li
@
296.926 133.592 mo
297.04 133.592 li
@
296.984 133.592 mo
296.984 143.999 li
@
296.926 143.999 mo
297.04 143.999 li
@
298.092 131.518 mo
298.206 131.518 li
@
298.147 131.518 mo
298.147 142.455 li
@
298.092 142.455 mo
298.206 142.455 li
@
299.259 140.765 mo
299.372 140.765 li
@
299.314 140.765 mo
299.314 149.158 li
@
299.259 149.158 mo
299.372 149.158 li
@
300.424 141.228 mo
300.538 141.228 li
@
300.48 141.228 mo
300.48 149.131 li
@
300.424 149.131 mo
300.538 149.131 li
@
301.582 122.665 mo
301.702 122.665 li
@
301.646 122.665 mo
301.646 136.357 li
@
301.582 136.357 mo
301.702 136.357 li
@
302.749 128.801 mo
302.868 128.801 li
@
302.804 128.801 mo
302.804 140.459 li
@
302.749 140.459 mo
302.868 140.459 li
@
303.915 132.889 mo
304.029 132.889 li
@
303.971 132.889 mo
303.971 143.294 li
@
303.915 143.294 mo
304.029 143.294 li
@
305.078 136.621 mo
305.192 136.621 li
@
305.137 136.621 mo
305.137 145.904 li
@
305.078 145.904 mo
305.192 145.904 li
@
306.245 110.111 mo
306.359 110.111 li
@
306.303 110.111 mo
306.303 128.055 li
@
306.245 128.055 mo
306.359 128.055 li
@
307.411 94.061 mo
307.525 94.061 li
@
307.469 94.061 mo
307.469 115.734 li
@
307.411 115.734 mo
307.525 115.734 li
@
308.577 78.7363 mo
308.691 78.7363 li
@
308.633 78.7363 mo
308.633 106.798 li
@
308.577 106.798 mo
308.691 106.798 li
@
309.735 64.2909 mo
309.857 64.2909 li
@
309.799 64.2909 mo
309.799 96.1801 li
@
309.735 96.1801 mo
309.857 96.1801 li
@
310.902 68.0869 mo
311.023 68.0869 li
@
310.96 68.0869 mo
310.96 99.3925 li
@
310.902 99.3925 mo
311.023 99.3925 li
@
312.068 68.1423 mo
312.187 68.1423 li
@
312.123 68.1423 mo
312.123 102.05 li
@
312.068 102.05 mo
312.187 102.05 li
@
313.234 95.9576 mo
313.348 95.9576 li
@
313.289 95.9576 mo
313.289 118.955 li
@
313.234 118.955 mo
313.348 118.955 li
@
314.4 82.8707 mo
314.514 82.8707 li
@
314.456 82.8707 mo
314.456 109.481 li
@
314.4 109.481 mo
314.514 109.481 li
@
315.564 97.3601 mo
315.677 97.3601 li
@
315.622 97.3601 mo
315.622 118.236 li
@
315.564 118.236 mo
315.677 118.236 li
@
316.73 95.0861 mo
316.844 95.0861 li
@
316.788 95.0861 mo
316.788 117.433 li
@
316.73 117.433 mo
316.844 117.433 li
@
317.891 89.8101 mo
318.01 89.8101 li
@
317.954 89.8101 mo
317.954 113.746 li
@
317.891 113.746 mo
318.01 113.746 li
@
319.054 84.8703 mo
319.176 84.8703 li
@
319.118 84.8703 mo
319.118 111.427 li
@
319.054 111.427 mo
319.176 111.427 li
@
320.22 138.44 mo
320.343 138.44 li
@
320.279 138.44 mo
320.279 147.526 li
@
320.22 147.526 mo
320.343 147.526 li
@
321.387 141.525 mo
321.501 141.525 li
@
321.445 141.525 mo
321.445 149.231 li
@
321.387 149.231 mo
321.501 149.231 li
@
322.553 102.064 mo
322.666 102.064 li
@
322.608 102.064 mo
322.608 121.357 li
@
322.553 121.357 mo
322.666 121.357 li
@
323.719 104.66 mo
323.833 104.66 li
@
323.775 104.66 mo
323.775 123.257 li
@
323.719 123.257 mo
323.833 123.257 li
@
324.885 108.57 mo
324.999 108.57 li
@
324.941 108.57 mo
324.941 125.589 li
@
324.885 125.589 mo
324.999 125.589 li
@
326.043 109.905 mo
326.162 109.905 li
@
326.107 109.905 mo
326.107 126.519 li
@
326.043 126.519 mo
326.162 126.519 li
@
327.21 121.401 mo
327.329 121.401 li
@
327.274 121.401 mo
327.274 134.261 li
@
327.21 134.261 mo
327.329 134.261 li
@
328.376 139.934 mo
328.495 139.934 li
@
328.432 139.934 mo
328.432 147.895 li
@
328.376 147.895 mo
328.495 147.895 li
@
329.539 137.196 mo
329.653 137.196 li
@
329.597 137.196 mo
329.597 146.026 li
@
329.539 146.026 mo
329.653 146.026 li
@
330.706 136.59 mo
330.819 136.59 li
@
330.764 136.59 mo
330.764 146.173 li
@
330.706 146.173 mo
330.819 146.173 li
@
331.872 105.982 mo
331.986 105.982 li
@
331.93 105.982 mo
331.93 124.925 li
@
331.872 124.925 mo
331.986 124.925 li
@
333.038 109.117 mo
333.152 109.117 li
@
333.093 109.117 mo
333.093 126.625 li
@
333.038 126.625 mo
333.152 126.625 li
@
334.204 107.951 mo
334.318 107.951 li
@
334.26 107.951 mo
334.26 125.75 li
@
334.204 125.75 mo
334.318 125.75 li
@
335.362 109.145 mo
335.485 109.145 li
@
335.426 109.145 mo
335.426 126.638 li
@
335.362 126.638 mo
335.485 126.638 li
@
336.528 108.684 mo
336.648 108.684 li
@
336.584 108.684 mo
336.584 126 li
@
336.528 126 mo
336.648 126 li
@
337.695 148.35 mo
337.814 148.35 li
@
337.75 148.35 mo
337.75 154.001 li
@
337.695 154.001 mo
337.814 154.001 li
@
338.861 126.867 mo
338.975 126.867 li
@
338.917 126.867 mo
338.917 138.326 li
@
338.861 138.326 mo
338.975 138.326 li
@
340.024 105.704 mo
340.138 105.704 li
@
340.083 105.704 mo
340.083 122.518 li
@
340.024 122.518 mo
340.138 122.518 li
@
341.191 103.644 mo
341.304 103.644 li
@
341.249 103.644 mo
341.249 121.187 li
@
341.191 121.187 mo
341.304 121.187 li
@
342.357 106.884 mo
342.471 106.884 li
@
342.416 106.884 mo
342.416 122.787 li
@
342.357 122.787 mo
342.471 122.787 li
@
343.515 113.518 mo
343.637 113.518 li
@
343.579 113.518 mo
343.579 128.174 li
@
343.515 128.174 mo
343.637 128.174 li
@
344.681 106.734 mo
344.803 106.734 li
@
344.745 106.734 mo
344.745 123.698 li
@
344.681 123.698 mo
344.803 123.698 li
@
345.848 129.837 mo
345.97 129.837 li
@
345.906 129.837 mo
345.906 141.142 li
@
345.848 141.142 mo
345.97 141.142 li
@
347.013 130.657 mo
347.127 130.657 li
@
347.069 130.657 mo
347.069 141.539 li
@
347.013 141.539 mo
347.127 141.539 li
@
348.18 132.981 mo
348.294 132.981 li
@
348.235 132.981 mo
348.235 142.969 li
@
348.18 142.969 mo
348.294 142.969 li
@
349.346 132.903 mo
349.46 132.903 li
@
349.402 132.903 mo
349.402 143.202 li
@
349.346 143.202 mo
349.46 143.202 li
@
350.509 133.706 mo
350.623 133.706 li
@
350.568 133.706 mo
350.568 143.722 li
@
350.509 143.722 mo
350.623 143.722 li
@
351.67 106.721 mo
351.79 106.721 li
@
351.734 106.721 mo
351.734 124.017 li
@
351.67 124.017 mo
351.79 124.017 li
@
352.837 105.107 mo
352.956 105.107 li
@
352.901 105.107 mo
352.901 122.97 li
@
352.837 122.97 mo
352.956 122.97 li
@
354 96.699 mo
354.122 96.699 li
@
354.058 96.699 mo
354.058 117.392 li
@
354 117.392 mo
354.122 117.392 li
@
355.166 100.609 mo
355.28 100.609 li
@
355.225 100.609 mo
355.225 120.855 li
@
355.166 120.855 mo
355.28 120.855 li
@
356.333 92.6038 mo
356.446 92.6038 li
@
356.391 92.6038 mo
356.391 115.515 li
@
356.333 115.515 mo
356.446 115.515 li
@
357.499 129.418 mo
357.612 129.418 li
@
357.554 129.418 mo
357.554 141.069 li
@
357.499 141.069 mo
357.612 141.069 li
@
358.665 136.563 mo
358.779 136.563 li
@
358.721 136.563 mo
358.721 146.168 li
@
358.665 146.168 mo
358.779 146.168 li
@
359.832 138.076 mo
359.945 138.076 li
@
359.887 138.076 mo
359.887 146.848 li
@
359.832 146.848 mo
359.945 146.848 li
@
360.989 139.498 mo
361.108 139.498 li
@
361.053 139.498 mo
361.053 148.2 li
@
360.989 148.2 mo
361.108 148.2 li
@
362.155 128.338 mo
362.275 128.338 li
@
362.211 128.338 mo
362.211 140.061 li
@
362.155 140.061 mo
362.275 140.061 li
@
363.322 116.326 mo
363.441 116.326 li
@
363.377 116.326 mo
363.377 131.792 li
@
363.322 131.792 mo
363.441 131.792 li
@
364.485 80.377 mo
364.599 80.377 li
@
364.543 80.377 mo
364.543 106.096 li
@
364.485 106.096 mo
364.599 106.096 li
@
365.651 82.4683 mo
365.765 82.4683 li
@
365.71 82.4683 mo
365.71 107.745 li
@
365.651 107.745 mo
365.765 107.745 li
@
366.818 88.4659 mo
366.932 88.4659 li
@
366.876 88.4659 mo
366.876 111.719 li
@
366.818 111.719 mo
366.932 111.719 li
@
367.984 98.5267 mo
368.098 98.5267 li
@
368.039 98.5267 mo
368.039 118.741 li
@
367.984 118.741 mo
368.098 118.741 li
@
369.142 97.0879 mo
369.264 97.0879 li
@
369.206 97.0879 mo
369.206 117.397 li
@
369.142 117.397 mo
369.264 117.397 li
@
370.308 132.698 mo
370.431 132.698 li
@
370.372 132.698 mo
370.372 142.997 li
@
370.308 142.997 mo
370.431 142.997 li
@
371.474 134.019 mo
371.593 134.019 li
@
371.53 134.019 mo
371.53 143.971 li
@
371.474 143.971 mo
371.593 143.971 li
@
372.641 138.704 mo
372.754 138.704 li
@
372.696 138.704 mo
372.696 147.34 li
@
372.641 147.34 mo
372.754 147.34 li
@
373.807 137.396 mo
373.921 137.396 li
@
373.863 137.396 mo
373.863 146.187 li
@
373.807 146.187 mo
373.921 146.187 li
@
374.97 133.569 mo
375.085 133.569 li
@
375.028 133.569 mo
375.028 143.58 li
@
374.97 143.58 mo
375.085 143.58 li
@
376.137 137.851 mo
376.25 137.851 li
@
376.195 137.851 mo
376.195 147.204 li
@
376.137 147.204 mo
376.25 147.204 li
@
377.297 136.363 mo
377.417 136.363 li
@
377.361 136.363 mo
377.361 146.232 li
@
377.297 146.232 mo
377.417 146.232 li
@
378.461 134.331 mo
378.583 134.331 li
@
378.524 134.331 mo
378.524 145.015 li
@
378.461 145.015 mo
378.583 145.015 li
@
379.627 134.267 mo
379.749 134.267 li
@
379.685 134.267 mo
379.685 144.354 li
@
379.627 144.354 mo
379.749 144.354 li
@
380.793 138.918 mo
380.907 138.918 li
@
380.852 138.918 mo
380.852 147.959 li
@
380.793 147.959 mo
380.907 147.959 li
@
381.959 139.825 mo
382.074 139.825 li
@
382.015 139.825 mo
382.015 148.506 li
@
381.959 148.506 mo
382.074 148.506 li
@
383.126 138.81 mo
383.24 138.81 li
@
383.181 138.81 mo
383.181 147.093 li
@
383.126 147.093 mo
383.24 147.093 li
@
384.292 130.201 mo
384.406 130.201 li
@
384.348 130.201 mo
384.348 141.148 li
@
384.292 141.148 mo
384.406 141.148 li
@
385.455 129.71 mo
385.57 129.71 li
@
385.514 129.71 mo
385.514 141.298 li
@
385.455 141.298 mo
385.57 141.298 li
@
386.616 120.988 mo
386.736 120.988 li
@
386.68 120.988 mo
386.68 135.469 li
@
386.616 135.469 mo
386.736 135.469 li
@
387.783 130.379 mo
387.902 130.379 li
@
387.838 130.379 mo
387.838 141.839 li
@
387.783 141.839 mo
387.902 141.839 li
@
388.946 133.136 mo
389.068 133.136 li
@
389.005 133.136 mo
389.005 143.458 li
@
388.946 143.458 mo
389.068 143.458 li
@
390.112 136.016 mo
390.226 136.016 li
@
390.17 136.016 mo
390.17 145.207 li
@
390.112 145.207 mo
390.226 145.207 li
@
391.279 87.686 mo
391.392 87.686 li
@
391.337 87.686 mo
391.337 112.53 li
@
391.279 112.53 mo
391.392 112.53 li
@
392.444 78.2721 mo
392.559 78.2721 li
@
392.501 78.2721 mo
392.501 103.877 li
@
392.444 103.877 mo
392.559 103.877 li
@
393.611 77.0004 mo
393.725 77.0004 li
@
393.666 77.0004 mo
393.666 102.911 li
@
393.611 102.911 mo
393.725 102.911 li
@
394.769 59.7485 mo
394.891 59.7485 li
@
394.833 59.7485 mo
394.833 91.6512 li
@
394.769 91.6512 mo
394.891 91.6512 li
@
395.935 77.7667 mo
396.055 77.7667 li
@
395.999 77.7667 mo
395.999 103.125 li
@
395.935 103.125 mo
396.055 103.125 li
@
397.101 81.2378 mo
397.221 81.2378 li
@
397.157 81.2378 mo
397.157 106.018 li
@
397.101 106.018 mo
397.221 106.018 li
@
398.268 99.5844 mo
398.379 99.5844 li
@
398.323 99.5844 mo
398.323 120.185 li
@
398.268 120.185 mo
398.379 120.185 li
@
399.432 74.5486 mo
399.545 74.5486 li
@
399.49 74.5486 mo
399.49 103.608 li
@
399.432 103.608 mo
399.545 103.608 li
@
400.597 76.1481 mo
400.711 76.1481 li
@
400.656 76.1481 mo
400.656 104.505 li
@
400.597 104.505 mo
400.711 104.505 li
@
401.764 127.572 mo
401.878 127.572 li
@
401.822 127.572 mo
401.822 140.031 li
@
401.764 140.031 mo
401.878 140.031 li
@
402.922 126.547 mo
403.044 126.547 li
@
402.986 126.547 mo
402.986 139.351 li
@
402.922 139.351 mo
403.044 139.351 li
@
404.088 65.6906 mo
404.21 65.6906 li
@
404.152 65.6906 mo
404.152 99.0598 li
@
404.088 99.0598 mo
404.21 99.0598 li
@
405.254 85.7944 mo
405.376 85.7944 li
@
405.31 85.7944 mo
405.31 111.483 li
@
405.254 111.483 mo
405.376 111.483 li
@
406.421 88.8575 mo
406.534 88.8575 li
@
406.476 88.8575 mo
406.476 112.671 li
@
406.421 112.671 mo
406.534 112.671 li
@
407.586 93.8193 mo
407.7 93.8193 li
@
407.642 93.8193 mo
407.642 116.268 li
@
407.586 116.268 mo
407.7 116.268 li
@
408.753 97.5378 mo
408.864 97.5378 li
@
408.808 97.5378 mo
408.808 117.953 li
@
408.753 117.953 mo
408.864 117.953 li
@
409.917 136.329 mo
410.03 136.329 li
@
409.975 136.329 mo
409.975 145.379 li
@
409.917 145.379 mo
410.03 145.379 li
@
411.082 137.451 mo
411.196 137.451 li
@
411.141 137.451 mo
411.141 145.926 li
@
411.082 145.926 mo
411.196 145.926 li
@
412.24 115.898 mo
412.363 115.898 li
@
412.307 115.898 mo
412.307 131.353 li
@
412.24 131.353 mo
412.363 131.353 li
@
413.407 114.362 mo
413.529 114.362 li
@
413.465 114.362 mo
413.465 129.76 li
@
413.407 129.76 mo
413.529 129.76 li
@
414.573 116.198 mo
414.695 116.198 li
@
414.631 116.198 mo
414.631 131.062 li
@
414.573 131.062 mo
414.695 131.062 li
@
415.739 111.299 mo
415.853 111.299 li
@
415.795 111.299 mo
415.795 128.188 li
@
415.739 128.188 mo
415.853 128.188 li
@
416.906 106.679 mo
417.02 106.679 li
@
416.961 106.679 mo
416.961 124.756 li
@
416.906 124.756 mo
417.02 124.756 li
@
418.072 145.121 mo
418.185 145.121 li
@
418.127 145.121 mo
418.127 151.76 li
@
418.072 151.76 mo
418.185 151.76 li
@
419.238 138.107 mo
419.349 138.107 li
@
419.294 138.107 mo
419.294 147.076 li
@
419.238 147.076 mo
419.349 147.076 li
@
420.396 142.555 mo
420.516 142.555 li
@
420.46 142.555 mo
420.46 150.028 li
@
420.396 150.028 mo
420.516 150.028 li
@
421.562 138.07 mo
421.681 138.07 li
@
421.626 138.07 mo
421.626 147.126 li
@
421.562 147.126 mo
421.681 147.126 li
@
422.726 137.218 mo
422.848 137.218 li
@
422.784 137.218 mo
422.784 146.218 li
@
422.726 146.218 mo
422.848 146.218 li
@
423.892 87.6135 mo
424.006 87.6135 li
@
423.951 87.6135 mo
423.951 112.721 li
@
423.892 112.721 mo
424.006 112.721 li
@
425.058 83.804 mo
425.172 83.804 li
@
425.116 83.804 mo
425.116 110.261 li
@
425.058 110.261 mo
425.172 110.261 li
@
426.225 74.6958 mo
426.338 74.6958 li
@
426.28 74.6958 mo
426.28 104.632 li
@
426.225 104.632 mo
426.338 104.632 li
@
427.391 55.4471 mo
427.505 55.4471 li
@
427.447 55.4471 mo
427.447 92.3201 li
@
427.391 92.3201 mo
427.505 92.3201 li
@
46.5393 92.1844 mo
47.7058 93.5784 li
48.8716 91.1458 li
50.0381 96.0024 li
51.2039 103.599 li
52.3676 112.622 li
53.5341 113.446 li
54.695 100.664 li
55.8579 94.4165 li
57.0245 91.337 li
58.191 86.3333 li
59.3568 106.032 li
60.5233 118.272 li
61.6891 112.985 li
62.8528 115.523 li
64.0136 93.7419 li
65.1802 83.6953 li
66.3431 77.1063 li
67.5097 71.7329 li
68.6762 84.7061 li
69.842 87.0029 li
71.0085 141.63 li
72.1665 140.45 li
73.3323 143.366 li
74.4988 147.326 li
75.6653 147.631 li
76.8283 145.904 li
77.9948 134.886 li
79.1614 89.3487 li
80.3186 83.8957 li
81.4852 74.8181 li
82.6517 78.3638 li
83.8175 88.7573 li
84.984 119.694 li
86.1505 119.716 li
87.3135 104.355 li
88.48 104.455 li
89.6408 134.922 li
90.8038 91.9647 li
91.9703 95.1998 li
93.1369 88.6521 li
94.3027 78.7136 li
95.4692 64.802 li
96.6357 75.5509 li
97.793 84.1509 li
98.9595 148.578 li
100.126 150.483 li
101.289 153.532 li
102.456 147.489 li
103.622 146.515 li
104.788 142.778 li
105.946 142.655 li
107.112 145.996 li
108.278 147.071 li
109.445 150.291 li
110.611 149.444 li
111.774 100.309 li
112.941 93.5506 li
114.107 95.2915 li
115.265 94.5942 li
116.431 92.3898 li
117.598 134.58 li
118.763 141.952 li
119.93 122.518 li
121.096 127.253 li
122.259 126.036 li
123.42 122.454 li
124.587 122.587 li
125.75 154.043 li
126.916 155.309 li
128.083 158.102 li
129.249 157.4 li
130.415 129.03 li
131.573 132.028 li
132.74 128.899 li
133.905 119.616 li
135.072 119.822 li
136.236 93.1589 li
137.401 91.0953 li
138.568 120.477 li
139.734 116.909 li
140.892 119.63 li
142.058 101.981 li
143.225 93.9473 li
144.391 100.217 li
145.557 108.051 li
146.721 117.861 li
147.887 151.891 li
149.045 145.215 li
150.211 136.982 li
151.377 136.718 li
152.543 142.655 li
153.71 145.84 li
154.876 150.872 li
156.042 150.717 li
157.2 147.817 li
158.366 145.968 li
159.53 103.308 li
160.696 103.813 li
161.862 95.1998 li
163.029 103.294 li
164.195 107.126 li
165.361 118.992 li
166.519 115.765 li
167.685 156.389 li
168.851 157.591 li
170.015 156.553 li
171.181 152.857 li
172.347 153.113 li
173.514 151.541 li
174.672 151.741 li
175.838 151.541 li
177.004 153.382 li
178.171 155.912 li
179.336 153.596 li
180.5 152.552 li
181.667 141.078 li
182.827 139.967 li
183.99 140.686 li
185.157 118.33 li
186.323 121.643 li
187.489 121.812 li
188.656 102.172 li
189.822 100.501 li
190.985 106.879 li
192.146 111.874 li
193.313 106.785 li
194.476 143.088 li
195.642 144.524 li
196.809 85.8918 li
197.975 84.087 li
199.141 81.3793 li
200.299 80.6606 li
201.465 86.8664 li
202.631 138.226 li
203.798 92.2618 li
204.961 64.3329 li
206.127 58.2045 li
207.294 59.9675 li
208.451 65.3629 li
209.618 51.3376 li
210.784 77.8669 li
211.95 76.731 li
213.117 98.049 li
214.283 145.421 li
215.446 139.87 li
216.613 137.232 li
217.773 141.675 li
218.936 142.072 li
220.103 141.93 li
221.269 142.761 li
222.435 134.794 li
223.602 140.558 li
224.768 146.06 li
225.925 143.11 li
227.092 141.447 li
228.259 144.063 li
229.422 148.528 li
230.588 144.232 li
231.755 144.993 li
232.92 143.466 li
234.078 147.567 li
235.245 148.27 li
236.411 143.602 li
237.577 89.7042 li
238.744 85.9366 li
239.907 92.0066 li
241.073 92.4204 li
242.24 100.887 li
243.398 121.394 li
244.564 116.695 li
245.73 121.324 li
246.896 114.166 li
248.062 111.769 li
249.229 123.981 li
250.392 123.845 li
251.553 109.814 li
252.719 102.428 li
253.883 98.7179 li
255.049 98.7875 li
256.215 83.1067 li
257.381 112.366 li
258.548 117.256 li
259.706 109.642 li
260.872 91.9789 li
262.038 103.097 li
263.204 113.843 li
264.368 116.395 li
265.534 117.867 li
266.7 146.579 li
267.866 147.234 li
269.024 146.771 li
270.191 144.332 li
271.357 143.602 li
272.523 148.989 li
273.69 148.561 li
274.853 145.782 li
276.019 144.696 li
277.177 149.55 li
278.344 151.385 li
279.509 153.824 li
280.676 114.79 li
281.842 113.082 li
283.008 114.207 li
284.175 111.442 li
285.333 105.763 li
286.499 147.007 li
287.662 121.671 li
288.829 110.175 li
289.995 109.842 li
291.161 113.504 li
292.328 113.104 li
293.493 131.203 li
294.651 132.462 li
295.818 133.764 li
296.984 138.795 li
298.147 136.991 li
299.314 144.96 li
300.48 145.179 li
301.646 129.512 li
302.804 134.631 li
303.971 138.093 li
305.137 141.261 li
306.303 119.083 li
307.469 104.894 li
308.633 92.7673 li
309.799 80.2355 li
310.96 83.7401 li
312.123 85.0978 li
313.289 107.462 li
314.456 96.1716 li
315.622 107.796 li
316.788 106.259 li
317.954 101.775 li
319.118 98.1485 li
320.279 142.983 li
321.445 145.379 li
322.608 111.71 li
323.775 113.957 li
324.941 117.078 li
326.107 118.208 li
327.274 127.827 li
328.432 143.913 li
329.597 141.611 li
330.764 141.384 li
331.93 115.459 li
333.093 117.875 li
334.26 116.85 li
335.426 117.889 li
336.584 117.342 li
337.75 151.18 li
338.917 132.597 li
340.083 114.115 li
341.249 112.416 li
342.416 114.832 li
343.579 120.846 li
344.745 115.215 li
345.906 135.491 li
347.069 136.102 li
348.235 137.979 li
349.402 138.048 li
350.568 138.709 li
351.734 115.365 li
352.901 114.043 li
354.058 107.048 li
355.225 110.731 li
356.391 104.055 li
357.554 135.25 li
358.721 141.361 li
359.887 142.463 li
361.053 143.849 li
362.211 134.203 li
363.377 124.059 li
364.543 93.2364 li
365.71 95.1053 li
366.876 100.09 li
368.039 108.634 li
369.206 107.24 li
370.372 137.843 li
371.53 138.995 li
372.696 143.024 li
373.863 141.789 li
375.028 138.576 li
376.195 142.527 li
377.361 141.298 li
378.524 139.675 li
379.685 139.307 li
380.852 143.438 li
382.015 144.163 li
383.181 142.955 li
384.348 135.674 li
385.514 135.505 li
386.68 128.224 li
387.838 136.108 li
389.005 138.299 li
390.17 140.615 li
391.337 100.109 li
392.501 91.0761 li
393.666 89.9516 li
394.833 75.6981 li
395.999 90.4427 li
397.157 93.6281 li
398.323 109.883 li
399.49 89.0772 li
400.656 90.329 li
401.822 133.805 li
402.986 132.945 li
404.152 82.3738 li
405.31 98.6404 li
406.476 100.764 li
407.642 105.044 li
408.808 107.745 li
409.975 140.856 li
411.141 141.689 li
412.307 123.626 li
413.465 122.063 li
414.631 123.634 li
415.795 119.744 li
416.961 115.715 li
418.127 148.442 li
419.294 142.591 li
420.46 146.296 li
421.626 142.6 li
422.784 141.716 li
423.95 100.167 li
425.116 97.0324 li
426.28 89.6601 li
427.447 73.8797 li
@
%ADOBeginSubsetFont: KAEQMX+ZapfDingbatsITC-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (KAEQMX+ZapfDingbatsITC)%%Title: (KAEQMX+ZapfDingbatsITC Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /KAEQMX+ZapfDingbatsITC def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {0 -143 976 814} def/FontInfo 4 dict dup begin/FSType 4 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 2 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 2 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B7A73DB6EDCEADEE682BBCDA5970D89D28D48D1D87076A4AFAA59561DDC2E1D897> |1 <001C60D8A8C9B6CAC2954EC113099DE44D9011ADE4E7ED00DD8B3742475A9079DE9842ACE67B9E2E7CDE1BD2333768EF66D646065655B7D975DFCD4864C2B231309A032A7FB096665EFB6B08D22160CE6423117DFD565B09ABEF17AE95F507F0747B5C895AA25E4525092F0D07F9BF603910AF19C86A51D41F8026CABB71A514> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /KAEQMX+ZapfDingbatsITC-Identity-H /Identity-H 0 [/KAEQMX+ZapfDingbatsITC] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IAACHO+ZapfDingbatsITC /KAEQMX+ZapfDingbatsITC-Identity-H findfont ct_VMDictPutIAACHO+ZapfDingbatsITC [4.18696 0 0 -4.18696 0 0 ]msf44.8837 93.6345 mo(\000\001)sh46.0477 95.0288 mo(\000\001)sh47.2116 92.5961 mo(\000\001)sh48.3756 97.453 mo(\000\001)sh49.5396 105.052 mo(\000\001)sh50.7036 114.075 mo(\000\001)sh51.8634 114.9 mo(\000\001)sh53.0273 102.117 mo(\000\001)sh54.1913 95.8704 mo(\000\001)sh55.3553 92.7929 mo(\000\001)sh56.5193 87.7895 mo(\000\001)sh57.6833 107.493 mo(\000\001)sh58.8472 119.736 mo(\000\001)sh60.007 114.44 mo(\000\001)sh61.171 116.977 mo(\000\001)sh62.335 95.2046 mo(\000\001)sh63.4989 85.1517 mo(\000\001)sh64.6629 78.5698 mo(\000\001)sh65.8269 73.1896 mo(\000\001)sh66.9909 86.1692 mo(\000\001)sh68.1549 88.4636 mo(\000\001)sh69.3146 143.087 mo(\000\001)sh70.4786 141.906 mo(\000\001)sh71.6426 144.829 mo(\000\001)sh72.8066 148.781 mo(\000\001)sh73.9706 149.095 mo(\000\001)sh75.1345 147.366 mo(\000\001)sh76.2985 136.342 mo(\000\001)sh77.4583 90.8041 mo(\000\001)sh78.6223 85.3569 mo(\000\001)sh79.7862 76.2796 mo(\000\001)sh80.9502 79.8175 mo(\000\001)sh82.1142 90.2096 mo(\000\001)sh83.2782 121.155 mo(\000\001)sh84.4422 121.168 mo(\000\001)sh85.6019 105.806 mo(\000\001)sh86.7659 105.907 mo(\000\001)sh87.9299 136.379 mo(\000\001)sh89.0939 93.4168 mo(\000\001)sh90.2579 96.6491 mo(\000\001)sh91.4218 90.1091 mo(\000\001)sh92.5858 80.1651 mo(\000\001)sh93.7498 66.2518 mo(\000\001)sh94.9096 76.9997 mo(\000\001)sh96.0735 85.5997 mo(\000\001)sh97.2375 150.025 mo(\000\001)sh98.4015 151.93 mo(\000\001)sh99.5655 154.978 mo(\000\001)sh100.729 148.936 mo(\000\001)sh101.893 147.96 mo(\000\001)sh103.053 144.221 mo(\000\001)sh104.217 144.1 mo(\000\001)sh105.381 147.441 mo(\000\001)sh106.545 148.521 mo(\000\001)sh107.709 151.733 mo(\000\001)sh108.873 150.895 mo(\000\001)sh110.037 101.753 mo(\000\001)sh111.197 94.9911 mo(\000\001)sh112.361 96.7413 mo(\000\001)sh113.525 96.0378 mo(\000\001)sh114.689 93.8355 mo(\000\001)sh115.853 136.023 mo(\000\001)sh117.017 143.401 mo(\000\001)sh118.181 123.961 mo(\000\001)sh119.341 128.7 mo(\000\001)sh120.505 127.478 mo(\000\001)sh121.668 123.902 mo(\000\001)sh122.832 124.036 mo(\000\001)sh123.996 155.484 mo(\000\001)sh125.16 156.749 mo(\000\001)sh126.324 159.55 mo(\000\001)sh127.488 158.838 mo(\000\001)sh128.648 130.467 mo(\000\001)sh129.812 133.465 mo(\000\001)sh130.976 130.346 mo(\000\001)sh132.14 121.055 mo(\000\001)sh133.304 121.269 mo(\000\001)sh134.468 94.5975 mo(\000\001)sh135.632 92.5417 mo(\000\001)sh136.792 121.913 mo(\000\001)sh137.956 118.35 mo(\000\001)sh139.12 121.068 mo(\000\001)sh140.284 103.415 mo(\000\001)sh141.448 95.3805 mo(\000\001)sh142.612 101.648 mo(\000\001)sh143.776 109.482 mo(\000\001)sh144.935 119.301 mo(\000\001)sh146.099 153.328 mo(\000\001)sh147.263 146.646 mo(\000\001)sh148.427 138.414 mo(\000\001)sh149.591 138.15 mo(\000\001)sh150.755 144.092 mo(\000\001)sh151.919 147.27 mo(\000\001)sh153.083 152.311 mo(\000\001)sh154.243 152.147 mo(\000\001)sh155.407 149.246 mo(\000\001)sh156.571 147.404 mo(\000\001)sh157.735 104.747 mo(\000\001)sh158.899 105.245 mo(\000\001)sh160.063 96.6282 mo(\000\001)sh161.227 104.726 mo(\000\001)sh162.387 108.557 mo(\000\001)sh163.551 120.427 mo(\000\001)sh164.715 117.195 mo(\000\001)sh165.879 157.821 mo(\000\001)sh167.043 159.022 mo(\000\001)sh168.207 157.992 mo(\000\001)sh169.371 154.295 mo(\000\001)sh170.53 154.542 mo(\000\001)sh171.694 152.976 mo(\000\001)sh172.858 153.177 mo(\000\001)sh174.022 152.972 mo(\000\001)sh175.186 154.819 mo(\000\001)sh176.35 157.343 mo(\000\001)sh177.514 155.032 mo(\000\001)sh178.678 153.981 mo(\000\001)sh179.838 142.513 mo(\000\001)sh181.002 141.395 mo(\000\001)sh182.166 142.111 mo(\000\001)sh183.33 119.761 mo(\000\001)sh184.494 123.065 mo(\000\001)sh185.658 123.236 mo(\000\001)sh186.822 103.604 mo(\000\001)sh187.982 101.933 mo(\000\001)sh189.146 108.301 mo(\000\001)sh190.31 113.305 mo(\000\001)sh191.474 108.209 mo(\000\001)sh192.638 144.515 mo(\000\001)sh193.802 145.959 mo(\000\001)sh194.966 87.3289 mo(\000\001)sh196.125 85.516 mo(\000\001)sh197.289 82.807 mo(\000\001)sh198.453 82.0911 mo(\000\001)sh199.617 88.2961 mo(\000\001)sh200.781 139.662 mo(\000\001)sh201.945 93.6973 mo(\000\001)sh203.109 65.7661 mo(\000\001)sh204.273 59.6405 mo(\000\001)sh205.433 61.3949 mo(\000\001)sh206.597 66.7961 mo(\000\001)sh207.761 52.7655 mo(\000\001)sh208.925 79.3025 mo(\000\001)sh210.089 78.1637 mo(\000\001)sh211.253 99.4753 mo(\000\001)sh212.417 146.855 mo(\000\001)sh213.577 141.295 mo(\000\001)sh214.741 138.657 mo(\000\001)sh215.905 143.099 mo(\000\001)sh217.069 143.505 mo(\000\001)sh218.232 143.355 mo(\000\001)sh219.396 144.192 mo(\000\001)sh220.56 136.216 mo(\000\001)sh221.72 141.981 mo(\000\001)sh222.884 147.483 mo(\000\001)sh224.048 144.531 mo(\000\001)sh225.212 142.869 mo(\000\001)sh226.376 145.49 mo(\000\001)sh227.54 149.953 mo(\000\001)sh228.704 145.653 mo(\000\001)sh229.868 146.415 mo(\000\001)sh231.028 144.887 mo(\000\001)sh232.192 148.99 mo(\000\001)sh233.356 149.694 mo(\000\001)sh234.52 145.03 mo(\000\001)sh235.684 91.1307 mo(\000\001)sh236.848 87.3541 mo(\000\001)sh238.012 93.4252 mo(\000\001)sh239.172 93.8355 mo(\000\001)sh240.335 102.302 mo(\000\001)sh241.499 122.818 mo(\000\001)sh242.663 118.12 mo(\000\001)sh243.827 122.746 mo(\000\001)sh244.991 115.587 mo(\000\001)sh246.155 113.192 mo(\000\001)sh247.315 125.397 mo(\000\001)sh248.479 125.267 mo(\000\001)sh249.643 111.237 mo(\000\001)sh250.807 103.851 mo(\000\001)sh251.971 100.133 mo(\000\001)sh253.135 100.212 mo(\000\001)sh254.299 84.5321 mo(\000\001)sh255.463 113.791 mo(\000\001)sh256.623 118.673 mo(\000\001)sh257.787 111.061 mo(\000\001)sh258.951 93.4042 mo(\000\001)sh260.115 104.521 mo(\000\001)sh261.279 115.26 mo(\000\001)sh262.443 117.814 mo(\000\001)sh263.607 119.284 mo(\000\001)sh264.766 147.994 mo(\000\001)sh265.93 148.655 mo(\000\001)sh267.094 148.186 mo(\000\001)sh268.258 145.75 mo(\000\001)sh269.422 145.017 mo(\000\001)sh270.586 150.406 mo(\000\001)sh271.75 149.987 mo(\000\001)sh272.91 147.207 mo(\000\001)sh274.074 146.114 mo(\000\001)sh275.238 150.975 mo(\000\001)sh276.402 152.801 mo(\000\001)sh277.566 155.237 mo(\000\001)sh278.73 116.202 mo(\000\001)sh279.894 114.498 mo(\000\001)sh281.058 115.62 mo(\000\001)sh282.218 112.861 mo(\000\001)sh283.382 107.175 mo(\000\001)sh284.546 148.421 mo(\000\001)sh285.71 123.086 mo(\000\001)sh286.874 111.592 mo(\000\001)sh288.038 111.257 mo(\000\001)sh289.202 114.925 mo(\000\001)sh290.361 114.519 mo(\000\001)sh291.525 132.619 mo(\000\001)sh292.689 133.884 mo(\000\001)sh293.853 135.178 mo(\000\001)sh295.017 140.21 mo(\000\001)sh296.181 138.406 mo(\000\001)sh297.345 146.382 mo(\000\001)sh298.505 146.595 mo(\000\001)sh299.669 130.936 mo(\000\001)sh300.833 136.048 mo(\000\001)sh301.997 139.511 mo(\000\001)sh303.161 142.681 mo(\000\001)sh304.325 120.502 mo(\000\001)sh305.489 106.321 mo(\000\001)sh306.653 94.1956 mo(\000\001)sh307.813 81.6556 mo(\000\001)sh308.977 85.1685 mo(\000\001)sh310.141 86.5209 mo(\000\001)sh311.305 108.883 mo(\000\001)sh312.469 97.5954 mo(\000\001)sh313.633 109.227 mo(\000\001)sh314.797 107.69 mo(\000\001)sh315.956 103.206 mo(\000\001)sh317.12 99.58 mo(\000\001)sh318.284 144.406 mo(\000\001)sh319.448 146.801 mo(\000\001)sh320.612 113.133 mo(\000\001)sh321.776 115.377 mo(\000\001)sh322.94 118.497 mo(\000\001)sh324.1 119.636 mo(\000\001)sh325.264 129.253 mo(\000\001)sh326.428 145.331 mo(\000\001)sh327.592 143.037 mo(\000\001)sh328.756 142.802 mo(\000\001)sh329.92 116.876 mo(\000\001)sh331.084 119.292 mo(\000\001)sh332.248 118.271 mo(\000\001)sh333.408 119.317 mo(\000\001)sh334.572 118.765 mo(\000\001)sh335.736 152.6 mo(\000\001)sh336.9 134.018 mo(\000\001)sh338.063 115.537 mo(\000\001)sh339.227 113.845 mo(\000\001)sh340.391 116.261 mo(\000\001)sh341.551 122.269 mo(\000\001)sh342.715 116.638 mo(\000\001)sh343.879 136.919 mo(\000\001)sh345.043 137.522 mo(\000\001)sh346.207 139.398 mo(\000\001)sh347.371 139.478 mo(\000\001)sh348.535 140.139 mo(\000\001)sh349.695 116.793 mo(\000\001)sh350.859 115.465 mo(\000\001)sh352.023 108.469 mo(\000\001)sh353.187 112.149 mo(\000\001)sh354.351 105.479 mo(\000\001)sh355.515 136.664 mo(\000\001)sh356.679 142.785 mo(\000\001)sh357.843 143.878 mo(\000\001)sh359.003 145.272 mo(\000\001)sh360.166 135.617 mo(\000\001)sh361.33 125.472 mo(\000\001)sh362.494 94.6478 mo(\000\001)sh363.658 96.5235 mo(\000\001)sh364.822 101.506 mo(\000\001)sh365.986 110.043 mo(\000\001)sh367.146 108.657 mo(\000\001)sh368.31 139.26 mo(\000\001)sh369.474 140.403 mo(\000\001)sh370.638 144.435 mo(\000\001)sh371.802 143.204 mo(\000\001)sh372.966 139.984 mo(\000\001)sh374.13 143.945 mo(\000\001)sh375.29 142.71 mo(\000\001)sh376.454 141.09 mo(\000\001)sh377.617 140.725 mo(\000\001)sh378.781 144.854 mo(\000\001)sh379.945 145.578 mo(\000\001)sh381.109 144.364 mo(\000\001)sh382.273 137.083 mo(\000\001)sh383.437 136.919 mo(\000\001)sh384.597 129.638 mo(\000\001)sh385.761 137.514 mo(\000\001)sh386.925 139.704 mo(\000\001)sh388.089 142.019 mo(\000\001)sh389.253 101.514 mo(\000\001)sh390.417 92.4873 mo(\000\001)sh391.581 91.3652 mo(\000\001)sh392.741 77.1127 mo(\000\001)sh393.905 91.855 mo(\000\001)sh395.068 95.0413 mo(\000\001)sh396.232 111.291 mo(\000\001)sh397.396 90.4901 mo(\000\001)sh398.56 91.7336 mo(\000\001)sh399.724 135.211 mo(\000\001)sh400.884 134.357 mo(\000\001)sh402.048 83.7784 mo(\000\001)sh403.212 100.045 mo(\000\001)sh404.376 102.176 mo(\000\001)sh405.54 106.447 mo(\000\001)sh406.704 109.147 mo(\000\001)sh407.868 142.258 mo(\000\001)sh409.032 143.095 mo(\000\001)sh410.192 125.024 mo(\000\001)sh411.356 123.458 mo(\000\001)sh412.519 125.028 mo(\000\001)sh413.683 121.139 mo(\000\001)sh414.847 117.115 mo(\000\001)sh416.011 149.845 mo(\000\001)sh417.175 143.995 mo(\000\001)sh418.335 147.692 mo(\000\001)sh419.499 143.995 mo(\000\001)sh420.663 143.112 mo(\000\001)sh421.827 101.56 mo(\000\001)sh422.991 98.4244 mo(\000\001)sh424.155 91.0595 mo(\000\001)sh425.319 75.2788 mo(\000\001)sh1 lc
10 ml
44.7955 171.767 mo
446.557 170.959 li
446.557 22.4973 li
45.2455 22.9032 li
cp
.519554 .434363 .434363 .0791638 cmyk
@
grestore
grestore
.753512 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
45.3813 181.247 mo
45.3813 178.226 li
false sop
.75021 .679683 .670222 .90164 cmyk
@
161.862 181.247 mo
161.862 178.226 li
@
278.344 181.247 mo
278.344 178.226 li
@
394.833 181.247 mo
394.833 178.226 li
@
%ADOBeginSubsetFont: JFFQMX+Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JFFQMX+Helvetica def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 97 /a putdup 100 /d putdup 115 /s putdup 116 /t putdup 121 /y putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IAACHP+Helvetica /JFFQMX+Helvetica findfont ct_VMDictPut/IAACHP+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 43{/.notdef}rp /a 2{/.notdef}rp /d 14{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]IAACHP+Helvetica nfIAACHP+Helvetica*1 [7.1086 0 0 -7.1086 0 0 ]msf43.4051 188.364 mo(0)sh155.934 188.364 mo(100)[3.95238 3.95238 0 ]xsh272.416 188.364 mo(200)[3.95239 3.95239 0 ]xsh388.904 188.364 mo(300)[3.95236 3.95239 0 ]xshIAACHP+Helvetica*1 [8.53032 0 0 -8.53032 0 0 ]msf212.127 194.06 mo(t \(days\))[2.36284 2.36284 2.84053 4.74286 4.74286 4.26515 4.29077 0 ]xshIAACHP+Helvetica*1 [7.1086 0 0 -7.1086 0 0 ]msf26.6157 173.699 mo(0.0)[3.95238 1.96903 0 ]xsh26.6157 144.76 mo(0.1)[3.95238 1.96903 0 ]xsh26.6157 115.813 mo(0.2)[3.95238 1.96903 0 ]xsh26.6157 86.8742 mo(0.3)[3.95238 1.96903 0 ]xsh26.6157 57.9351 mo(0.4)[3.95238 1.96903 0 ]xsh26.6157 28.996 mo(0.5)[3.95238 1.96903 0 ]xsh38.5087 171.148 mo
41.5299 171.148 li
@
38.5087 142.208 mo
41.5299 142.208 li
@
38.5087 113.26 mo
41.5299 113.26 li
@
38.5087 84.323 mo
41.5299 84.323 li
@
38.5087 55.3831 mo
41.5299 55.3831 li
@
38.5087 26.4433 mo
41.5299 26.4433 li
@
%ADOBeginSubsetFont: JFFQMX+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHP+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/V <1C60D8A8C9B64EDFA60949676B75C625C6948873966B83A549B84A6BD5D6EE9C83058CE085EB61> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHP+Helvetica /Encoding getdup 86 /V putpop%ADOEndSubsetFont
/IAACHP+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 32{/.notdef}rp /V 10{/.notdef}rp /a 2{/.notdef}rp /d 14{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]IAACHP+Helvetica nfIAACHP+Helvetica*1 [0 -8.53032 -8.53032 0 0 0 ]msf24.0566 103.21 mo(V)shgsave
4.65824 412.082 mo
211.016 412.082 li
211.016 205.724 li
4.65824 205.724 li
cp
clp
5.07812 206.564 mo
211.436 206.564 li
211.436 412.921 li
5.07812 412.921 li
cp
0 0 0 0 cmyk
f
.759511 lw
1 lc
5.07812 206.564 mo
211.436 206.564 li
211.436 412.921 li
5.07812 412.921 li
cp
@
gsave
36.1851 228.4 mo
200.7 228.4 li
200.7 385.368 li
36.1851 385.368 li
cp
clp
gsave
36.1851 385.57 mo
207.433 385.57 li
207.433 227.936 li
36.1851 227.936 li
cp
clp
36.1851 228.4 mo
200.7 228.4 li
200.7 385.368 li
36.1851 385.368 li
cp
f
0 lc
42.0685 363.96 mo
200.7 363.96 li
.0120546 .00628672 .00628672 0 cmyk
@
42.0685 335 mo
200.7 335.423 li
@
42.9111 306.882 mo
207.422 306.882 li
@
42.9111 278.345 mo
200.7 278.345 li
@
42.4883 249.804 mo
200.7 249.804 li
@
72.4195 378.646 mo
72.4195 228.4 li
@
132.19 378.226 mo
132.19 228.4 li
@
191.964 379.486 mo
191.964 228.4 li
@
.308104 lw
36.1851 378.235 mo
200.7 378.235 li
.0886549 .0642405 .0690623 0 cmyk
@
42.0685 349.694 mo
200.7 349.694 li
@
41.6486 321.157 mo
200.7 321.157 li
@
42.4883 292.616 mo
200.7 292.616 li
@
42.0685 263.656 mo
200.7 264.078 li
@
42.9111 235.538 mo
200.7 235.538 li
@
42.5278 385.369 mo
42.5278 228.4 li
@
102.306 385.369 mo
102.306 228.4 li
@
162.077 385.369 mo
162.077 228.4 li
@
.759511 lw
1 ml
43.6663 307.741 mo
43.7867 307.741 li
.75021 .679683 .670222 .90164 cmyk
@
43.7229 307.741 mo
43.7229 330.032 li
@
43.6663 330.032 mo
43.7867 330.032 li
@
44.8615 317.952 mo
44.9768 317.952 li
@
44.9202 317.952 mo
44.9202 336.467 li
@
44.8615 336.467 mo
44.9768 336.467 li
@
46.0595 307.204 mo
46.1741 307.204 li
@
46.1154 307.204 mo
46.1154 329.738 li
@
46.0595 329.738 mo
46.1741 329.738 li
@
47.2489 290.897 mo
47.3693 290.897 li
@
47.3134 290.897 mo
47.3134 318.584 li
@
47.2489 318.584 mo
47.3693 318.584 li
@
48.4441 309.455 mo
48.5673 309.455 li
@
48.5085 309.455 mo
48.5085 330.605 li
@
48.4441 330.605 mo
48.5673 330.605 li
@
49.6421 326.177 mo
49.7625 326.177 li
@
49.698 326.177 mo
49.698 342.148 li
@
49.6421 342.148 mo
49.7625 342.148 li
@
50.8372 338.63 mo
50.9605 338.63 li
@
50.896 338.63 mo
50.896 350.094 li
@
50.8372 350.094 mo
50.9605 350.094 li
@
52.0353 344.527 mo
52.1499 344.527 li
@
52.0911 344.527 mo
52.0911 353.708 li
@
52.0353 353.708 mo
52.1499 353.708 li
@
53.2304 344.413 mo
53.3451 344.413 li
@
53.2892 344.413 mo
53.2892 353.635 li
@
53.2304 353.635 mo
53.3451 353.635 li
@
54.4284 346.85 mo
54.5431 346.85 li
@
54.4843 346.85 mo
54.4843 355.964 li
@
54.4284 355.964 mo
54.5431 355.964 li
@
55.6179 345.94 mo
55.7382 345.94 li
@
55.6823 345.94 mo
55.6823 355.334 li
@
55.6179 355.334 mo
55.7382 355.334 li
@
56.813 348.197 mo
56.9363 348.197 li
@
56.8775 348.197 mo
56.8775 356.708 li
@
56.813 356.708 mo
56.9363 356.708 li
@
58.011 337.829 mo
58.1314 337.829 li
@
58.0669 337.829 mo
58.0669 350.139 li
@
58.011 350.139 mo
58.1314 350.139 li
@
59.2062 339.979 mo
59.3294 339.979 li
@
59.2649 339.979 mo
59.2649 351.637 li
@
59.2062 351.637 mo
59.3294 351.637 li
@
60.4042 339.047 mo
60.5189 339.047 li
@
60.4601 339.047 mo
60.4601 351.104 li
@
60.4042 351.104 mo
60.5189 351.104 li
@
61.5994 337.936 mo
61.714 337.936 li
@
61.6581 337.936 mo
61.6581 350.47 li
@
61.5994 350.47 mo
61.714 350.47 li
@
62.7888 336.783 mo
62.912 336.783 li
@
62.8533 336.783 mo
62.8533 349.588 li
@
62.7888 349.588 mo
62.912 349.588 li
@
63.9868 333.222 mo
64.1072 333.222 li
@
64.0513 333.222 mo
64.0513 347.094 li
@
63.9868 347.094 mo
64.1072 347.094 li
@
65.182 319.866 mo
65.3052 319.866 li
@
65.2407 319.866 mo
65.2407 338.087 li
@
65.182 338.087 mo
65.3052 338.087 li
@
66.38 316.418 mo
66.5004 316.418 li
@
66.4359 316.418 mo
66.4359 336.31 li
@
66.38 336.31 mo
66.5004 336.31 li
@
67.5751 312.349 mo
67.6898 312.349 li
@
67.6339 312.349 mo
67.6339 333.401 li
@
67.5751 333.401 mo
67.6898 333.401 li
@
68.7725 313.689 mo
68.8878 313.689 li
@
68.829 313.689 mo
68.829 334.496 li
@
68.7725 334.496 mo
68.8878 334.496 li
@
69.9676 332.319 mo
70.083 332.319 li
@
70.0264 332.319 mo
70.0264 346.378 li
@
69.9676 346.378 mo
70.083 346.378 li
@
71.1577 341.146 mo
71.2803 341.146 li
@
71.2215 341.146 mo
71.2215 352.009 li
@
71.1577 352.009 mo
71.2803 352.009 li
@
72.355 343.984 mo
72.4754 343.984 li
@
72.4195 343.984 mo
72.4195 353.993 li
@
72.355 353.993 mo
72.4754 353.993 li
@
73.5502 346.529 mo
73.6734 346.529 li
@
73.609 346.529 mo
73.609 355.843 li
@
73.5502 355.843 mo
73.6734 355.843 li
@
74.7482 353.433 mo
74.8686 353.433 li
@
74.8041 353.433 mo
74.8041 360.369 li
@
74.7482 360.369 mo
74.8686 360.369 li
@
75.9434 323.964 mo
76.058 323.964 li
@
76.0021 323.964 mo
76.0021 341.138 li
@
75.9434 341.138 mo
76.058 341.138 li
@
77.1414 320.969 mo
77.256 320.969 li
@
77.1973 320.969 mo
77.1973 338.818 li
@
77.1414 338.818 mo
77.256 338.818 li
@
78.3308 321.221 mo
78.4512 321.221 li
@
78.3953 321.221 mo
78.3953 338.681 li
@
78.3308 338.681 mo
78.4512 338.681 li
@
79.526 314.299 mo
79.6492 314.299 li
@
79.5905 314.299 mo
79.5905 334.476 li
@
79.526 334.476 mo
79.6492 334.476 li
@
80.724 327.49 mo
80.8444 327.49 li
@
80.7799 327.49 mo
80.7799 342.758 li
@
80.724 342.758 mo
80.8444 342.758 li
@
81.9192 329.488 mo
82.0424 329.488 li
@
81.9779 329.488 mo
81.9779 344.141 li
@
81.9192 344.141 mo
82.0424 344.141 li
@
83.1172 326.774 mo
83.2404 326.774 li
@
83.1731 326.774 mo
83.1731 342.271 li
@
83.1172 342.271 mo
83.2404 342.271 li
@
84.3152 334.527 mo
84.427 334.527 li
@
84.3711 334.527 mo
84.3711 347.472 li
@
84.3152 347.472 mo
84.427 347.472 li
@
85.5104 340.572 mo
85.625 340.572 li
@
85.5691 340.572 mo
85.5691 351.041 li
@
85.5104 351.041 mo
85.625 351.041 li
@
86.6998 324.496 mo
86.823 324.496 li
@
86.7643 324.496 mo
86.7643 339.864 li
@
86.6998 339.864 mo
86.823 339.864 li
@
87.8978 327.009 mo
88.0182 327.009 li
@
87.9623 327.009 mo
87.9623 341.477 li
@
87.8978 341.477 mo
88.0182 341.477 li
@
89.093 302.104 mo
89.2162 302.104 li
@
89.1517 302.104 mo
89.1517 324.91 li
@
89.093 324.91 mo
89.2162 324.91 li
@
90.291 296.506 mo
90.4114 296.506 li
@
90.3469 296.506 mo
90.3469 321.126 li
@
90.291 321.126 mo
90.4114 321.126 li
@
91.4861 304.962 mo
91.6008 304.962 li
@
91.5449 304.962 mo
91.5449 326.838 li
@
91.4861 326.838 mo
91.6008 326.838 li
@
92.6842 306.174 mo
92.7988 306.174 li
@
92.74 306.174 mo
92.74 327.977 li
@
92.6842 327.977 mo
92.7988 327.977 li
@
93.8736 304.805 mo
93.9939 304.805 li
@
93.9381 304.805 mo
93.9381 326.149 li
@
93.8736 326.149 mo
93.9939 326.149 li
@
95.0687 331.065 mo
95.192 331.065 li
@
95.1332 331.065 mo
95.1332 344.457 li
@
95.0687 344.457 mo
95.192 344.457 li
@
96.2668 321.901 mo
96.3871 321.901 li
@
96.3226 321.901 mo
96.3226 338.63 li
@
96.2668 338.63 mo
96.3871 338.63 li
@
97.4619 324.271 mo
97.5844 324.271 li
@
97.5207 324.271 mo
97.5207 340.617 li
@
97.4619 340.617 mo
97.5844 340.617 li
@
98.6592 316.174 mo
98.7796 316.174 li
@
98.7158 316.174 mo
98.7158 335.134 li
@
98.6592 335.134 mo
98.7796 335.134 li
@
99.8544 314.025 mo
99.9697 314.025 li
@
99.9131 314.025 mo
99.9131 333.709 li
@
99.8544 333.709 mo
99.9697 333.709 li
@
101.052 311.232 mo
101.167 311.232 li
@
101.108 311.232 mo
101.108 331.776 li
@
101.052 331.776 mo
101.167 331.776 li
@
102.242 317.05 mo
102.362 317.05 li
@
102.306 317.05 mo
102.306 335.772 li
@
102.242 335.772 mo
102.362 335.772 li
@
103.437 324.86 mo
103.56 324.86 li
@
103.501 324.86 mo
103.501 340.108 li
@
103.437 340.108 mo
103.56 340.108 li
@
104.635 340.063 mo
104.755 340.063 li
@
104.691 340.063 mo
104.691 350.618 li
@
104.635 350.618 mo
104.755 350.618 li
@
105.83 339.512 mo
105.953 339.512 li
@
105.889 339.512 mo
105.889 350.176 li
@
105.83 350.176 mo
105.953 350.176 li
@
107.028 346.921 mo
107.143 346.921 li
@
107.084 346.921 mo
107.084 355.399 li
@
107.028 355.399 mo
107.143 355.399 li
@
108.223 348.182 mo
108.338 348.182 li
@
108.282 348.182 mo
108.282 356.092 li
@
108.223 356.092 mo
108.338 356.092 li
@
109.413 340.715 mo
109.536 340.715 li
@
109.477 340.715 mo
109.477 350.934 li
@
109.413 350.934 mo
109.536 350.934 li
@
110.611 338.832 mo
110.731 338.832 li
@
110.675 338.832 mo
110.675 349.851 li
@
110.611 349.851 mo
110.731 349.851 li
@
111.806 332.425 mo
111.929 332.425 li
@
111.865 332.425 mo
111.865 345.437 li
@
111.806 345.437 mo
111.929 345.437 li
@
113.004 326.628 mo
113.124 326.628 li
@
113.06 326.628 mo
113.06 341.969 li
@
113.004 341.969 mo
113.124 341.969 li
@
114.199 329.668 mo
114.322 329.668 li
@
114.258 329.668 mo
114.258 343.268 li
@
114.199 343.268 mo
114.322 343.268 li
@
115.397 339.856 mo
115.512 339.856 li
@
115.453 339.856 mo
115.453 350.424 li
@
115.397 350.424 mo
115.512 350.424 li
@
116.592 337.012 mo
116.707 337.012 li
@
116.651 337.012 mo
116.651 348.463 li
@
116.592 348.463 mo
116.707 348.463 li
@
117.782 340.186 mo
117.905 340.186 li
@
117.846 340.186 mo
117.846 350.791 li
@
117.782 350.791 mo
117.905 350.791 li
@
118.98 334.849 mo
119.1 334.849 li
@
119.044 334.849 mo
119.044 347.595 li
@
118.98 347.595 mo
119.1 347.595 li
@
120.175 337.191 mo
120.298 337.191 li
@
120.234 337.191 mo
120.234 349.616 li
@
120.175 349.616 mo
120.298 349.616 li
@
121.373 323.191 mo
121.493 323.191 li
@
121.429 323.191 mo
121.429 340.145 li
@
121.373 340.145 mo
121.493 340.145 li
@
122.568 325.212 mo
122.683 325.212 li
@
122.627 325.212 mo
122.627 341.426 li
@
122.568 341.426 mo
122.683 341.426 li
@
123.765 331.193 mo
123.881 331.193 li
@
123.822 331.193 mo
123.822 345.496 li
@
123.765 345.496 mo
123.881 345.496 li
@
124.956 344.586 mo
125.076 344.586 li
@
125.019 344.586 mo
125.019 354.13 li
@
124.956 354.13 mo
125.076 354.13 li
@
126.151 342.235 mo
126.273 342.235 li
@
126.214 342.235 mo
126.214 352.275 li
@
126.151 352.275 mo
126.273 352.275 li
@
127.348 346.033 mo
127.468 346.033 li
@
127.405 346.033 mo
127.405 354.954 li
@
127.348 354.954 mo
127.468 354.954 li
@
128.543 343.281 mo
128.666 343.281 li
@
128.602 343.281 mo
128.602 353.033 li
@
128.543 353.033 mo
128.666 353.033 li
@
129.741 343.525 mo
129.862 343.525 li
@
129.797 343.525 mo
129.797 353.221 li
@
129.741 353.221 mo
129.862 353.221 li
@
130.936 333.651 mo
131.051 333.651 li
@
130.995 333.651 mo
130.995 346.363 li
@
130.936 346.363 mo
131.051 346.363 li
@
132.134 331.285 mo
132.249 331.285 li
@
132.19 331.285 mo
132.19 344.972 li
@
132.134 344.972 mo
132.249 344.972 li
@
133.324 327.977 mo
133.444 327.977 li
@
133.388 327.977 mo
133.388 342.901 li
@
133.324 342.901 mo
133.444 342.901 li
@
134.519 321.534 mo
134.642 321.534 li
@
134.583 321.534 mo
134.583 338.079 li
@
134.519 338.079 mo
134.642 338.079 li
@
135.717 319.357 mo
135.837 319.357 li
@
135.773 319.357 mo
135.773 336.204 li
@
135.717 336.204 mo
135.837 336.204 li
@
136.912 327.684 mo
137.035 327.684 li
@
136.971 327.684 mo
136.971 342.12 li
@
136.912 342.12 mo
137.035 342.12 li
@
138.11 323.513 mo
138.225 323.513 li
@
138.166 323.513 mo
138.166 339.786 li
@
138.11 339.786 mo
138.225 339.786 li
@
139.308 322.64 mo
139.42 322.64 li
@
139.364 322.64 mo
139.364 339.263 li
@
139.308 339.263 mo
139.42 339.263 li
@
140.495 334.482 mo
140.618 334.482 li
@
140.562 334.482 mo
140.562 347.48 li
@
140.495 347.48 mo
140.618 347.48 li
@
141.693 331.193 mo
141.816 331.193 li
@
141.757 331.193 mo
141.757 344.886 li
@
141.693 344.886 mo
141.816 344.886 li
@
142.891 339.685 mo
143.011 339.685 li
@
142.947 339.685 mo
142.947 350.925 li
@
142.891 350.925 mo
143.011 350.925 li
@
144.086 331.115 mo
144.209 331.115 li
@
144.145 331.115 mo
144.145 344.88 li
@
144.086 344.88 mo
144.209 344.88 li
@
145.284 331.61 mo
145.404 331.61 li
@
145.34 331.61 mo
145.34 345.468 li
@
145.284 345.468 mo
145.404 345.468 li
@
146.479 333.567 mo
146.594 333.567 li
@
146.538 333.567 mo
146.538 346.542 li
@
146.479 346.542 mo
146.594 346.542 li
@
147.677 342.414 mo
147.792 342.414 li
@
147.733 342.414 mo
147.733 352.482 li
@
147.677 352.482 mo
147.792 352.482 li
@
148.866 345.037 mo
148.987 345.037 li
@
148.931 345.037 mo
148.931 354.099 li
@
148.866 354.099 mo
148.987 354.099 li
@
150.062 350.677 mo
150.185 350.677 li
@
150.126 350.677 mo
150.126 358.108 li
@
150.062 358.108 mo
150.185 358.108 li
@
151.26 348.941 mo
151.38 348.941 li
@
151.316 348.941 mo
151.316 356.745 li
@
151.26 356.745 mo
151.38 356.745 li
@
152.455 343.36 mo
152.577 343.36 li
@
152.514 343.36 mo
152.514 353.271 li
@
152.455 353.271 mo
152.577 353.271 li
@
153.652 337.292 mo
153.767 337.292 li
@
153.709 337.292 mo
153.709 348.936 li
@
153.652 348.936 mo
153.767 348.936 li
@
154.847 341.196 mo
154.963 341.196 li
@
154.906 341.196 mo
154.906 352.166 li
@
154.847 352.166 mo
154.963 352.166 li
@
156.037 336.066 mo
156.16 336.066 li
@
156.101 336.066 mo
156.101 347.981 li
@
156.037 347.981 mo
156.16 347.981 li
@
157.235 329.338 mo
157.355 329.338 li
@
157.299 329.338 mo
157.299 343.626 li
@
157.235 343.626 mo
157.355 343.626 li
@
158.43 323.018 mo
158.553 323.018 li
@
158.489 323.018 mo
158.489 339.176 li
@
158.43 339.176 mo
158.553 339.176 li
@
159.628 323.384 mo
159.748 323.384 li
@
159.684 323.384 mo
159.684 339.705 li
@
159.628 339.705 mo
159.748 339.705 li
@
160.823 326.522 mo
160.946 326.522 li
@
160.882 326.522 mo
160.882 341.269 li
@
160.823 341.269 mo
160.946 341.269 li
@
162.021 333.113 mo
162.136 333.113 li
@
162.077 333.113 mo
162.077 346.112 li
@
162.021 346.112 mo
162.136 346.112 li
@
163.216 332.391 mo
163.331 332.391 li
@
163.275 332.391 mo
163.275 345.18 li
@
163.216 345.18 mo
163.331 345.18 li
@
164.406 341.826 mo
164.529 341.826 li
@
164.47 341.826 mo
164.47 351.816 li
@
164.406 351.816 mo
164.529 351.816 li
@
165.604 343.691 mo
165.724 343.691 li
@
165.668 343.691 mo
165.668 353.12 li
@
165.604 353.12 mo
165.724 353.12 li
@
166.799 327.854 mo
166.922 327.854 li
@
166.858 327.854 mo
166.858 342.386 li
@
166.799 342.386 mo
166.922 342.386 li
@
167.997 326.894 mo
168.117 326.894 li
@
168.053 326.894 mo
168.053 341.418 li
@
167.997 341.418 mo
168.117 341.418 li
@
169.192 326.83 mo
169.307 326.83 li
@
169.251 326.83 mo
169.251 341.606 li
@
169.192 341.606 mo
169.307 341.606 li
@
170.39 325.906 mo
170.505 325.906 li
@
170.446 325.906 mo
170.446 341.252 li
@
170.39 341.252 mo
170.505 341.252 li
@
171.579 329.545 mo
171.7 329.545 li
@
171.644 329.545 mo
171.644 343.484 li
@
171.579 343.484 mo
171.7 343.484 li
@
172.775 338.252 mo
172.898 338.252 li
@
172.839 338.252 mo
172.839 349.423 li
@
172.775 349.423 mo
172.898 349.423 li
@
173.973 343.581 mo
174.093 343.581 li
@
174.029 343.581 mo
174.029 353.111 li
@
173.973 353.111 mo
174.093 353.111 li
@
175.168 347.604 mo
175.291 347.604 li
@
175.227 347.604 mo
175.227 355.468 li
@
175.168 355.468 mo
175.291 355.468 li
@
176.366 352.583 mo
176.486 352.583 li
@
176.422 352.583 mo
176.422 359.137 li
@
176.366 359.137 mo
176.486 359.137 li
@
177.561 342.923 mo
177.676 342.923 li
@
177.62 342.923 mo
177.62 352.96 li
@
177.561 352.96 mo
177.676 352.96 li
@
178.758 342.02 mo
178.874 342.02 li
@
178.815 342.02 mo
178.815 352.275 li
@
178.758 352.275 mo
178.874 352.275 li
@
179.948 336.677 mo
180.069 336.677 li
@
180.012 336.677 mo
180.012 348.899 li
@
179.948 348.899 mo
180.069 348.899 li
@
181.144 336.869 mo
181.266 336.869 li
@
181.207 336.869 mo
181.207 349.064 li
@
181.144 349.064 mo
181.266 349.064 li
@
182.341 330.908 mo
182.461 330.908 li
@
182.397 330.908 mo
182.397 345.16 li
@
182.341 345.16 mo
182.461 345.16 li
@
183.536 329.626 mo
183.659 329.626 li
@
183.595 329.626 mo
183.595 344.27 li
@
183.536 344.27 mo
183.659 344.27 li
@
184.734 306.353 mo
184.849 306.353 li
@
184.79 306.353 mo
184.79 328.162 li
@
184.734 328.162 mo
184.849 328.162 li
@
185.929 309.611 mo
186.044 309.611 li
@
185.988 309.611 mo
185.988 330.155 li
@
185.929 330.155 mo
186.044 330.155 li
@
187.119 309.67 mo
187.242 309.67 li
@
187.183 309.67 mo
187.183 330.362 li
@
187.119 330.362 mo
187.242 330.362 li
@
188.317 318.618 mo
188.437 318.618 li
@
188.381 318.618 mo
188.381 335.878 li
@
188.317 335.878 mo
188.437 335.878 li
@
189.512 319.307 mo
189.635 319.307 li
@
189.571 319.307 mo
189.571 336.718 li
@
189.512 336.718 mo
189.635 336.718 li
@
190.71 328.937 mo
190.83 328.937 li
@
190.766 328.937 mo
190.766 343.562 li
@
190.71 343.562 mo
190.83 343.562 li
@
191.905 335.979 mo
192.028 335.979 li
@
191.964 335.979 mo
191.964 348.533 li
@
191.905 348.533 mo
192.028 348.533 li
@
193.103 339.506 mo
193.218 339.506 li
@
193.159 339.506 mo
193.159 350.517 li
@
193.103 350.517 mo
193.218 350.517 li
@
43.7229 318.892 mo
44.9202 327.211 li
46.1154 318.47 li
47.3134 304.741 li
48.5085 320.031 li
49.698 334.16 li
50.896 344.362 li
52.0911 349.12 li
53.2892 349.028 li
54.4843 351.407 li
55.6823 350.64 li
56.8775 352.454 li
58.0669 343.984 li
59.2649 345.812 li
60.4601 345.073 li
61.6581 344.206 li
62.8533 343.181 li
64.0513 340.158 li
65.2407 328.98 li
66.4359 326.365 li
67.6339 322.875 li
68.829 324.092 li
70.0264 339.346 li
71.2215 346.576 li
72.4195 348.991 li
73.609 351.186 li
74.8041 356.901 li
76.0021 332.557 li
77.1973 329.889 li
78.3953 329.948 li
79.5905 324.386 li
80.7799 335.12 li
81.9779 336.811 li
83.1731 334.518 li
84.3711 341.004 li
85.5691 345.804 li
86.7643 332.175 li
87.9623 334.238 li
89.1517 313.504 li
90.3469 308.816 li
91.5449 315.903 li
92.74 317.07 li
93.9381 315.475 li
95.1332 337.765 li
96.3226 330.269 li
97.5207 332.442 li
98.7158 325.654 li
99.9131 323.863 li
101.108 321.498 li
102.306 326.415 li
103.501 332.483 li
104.691 345.344 li
105.889 344.843 li
107.084 351.155 li
108.282 352.138 li
109.477 345.826 li
110.675 344.343 li
111.865 338.932 li
113.06 334.297 li
114.258 336.467 li
115.453 345.137 li
116.651 342.736 li
117.846 345.488 li
119.044 341.219 li
120.234 343.402 li
121.429 331.667 li
122.627 333.32 li
123.822 338.345 li
125.019 349.358 li
126.214 347.259 li
127.405 350.489 li
128.602 348.16 li
129.797 348.367 li
130.995 340.007 li
132.19 338.129 li
133.388 335.436 li
134.583 329.811 li
135.773 327.785 li
136.971 334.899 li
138.166 331.644 li
139.364 330.95 li
140.562 340.981 li
141.757 338.045 li
142.947 345.303 li
144.145 337.995 li
145.34 338.537 li
146.538 340.057 li
147.733 347.444 li
148.931 349.565 li
150.126 354.388 li
151.316 352.84 li
152.514 348.311 li
153.709 343.108 li
154.906 346.685 li
156.101 342.02 li
157.299 336.48 li
158.489 331.101 li
159.684 331.546 li
160.882 333.894 li
162.077 339.612 li
163.275 338.79 li
164.47 346.823 li
165.668 348.404 li
166.858 335.12 li
168.053 334.152 li
169.251 334.216 li
170.446 333.581 li
171.644 336.511 li
172.839 343.842 li
174.029 348.348 li
175.227 351.536 li
176.422 355.863 li
177.62 347.945 li
178.815 347.144 li
180.012 342.786 li
181.207 342.965 li
182.397 338.037 li
183.595 336.948 li
184.79 317.257 li
185.988 319.88 li
187.183 320.017 li
188.381 327.247 li
189.571 328.014 li
190.766 336.254 li
191.964 342.258 li
193.159 345.014 li
@
IAACHO+ZapfDingbatsITC [4.2203 0 0 -4.2203 0 0 ]msf42.0534 320.353 mo(\000\001)sh43.252 328.671 mo(\000\001)sh44.4506 319.935 mo(\000\001)sh45.6491 306.198 mo(\000\001)sh46.8392 321.488 mo(\000\001)sh48.0378 335.626 mo(\000\001)sh49.2364 345.822 mo(\000\001)sh50.4349 350.579 mo(\000\001)sh51.6335 350.486 mo(\000\001)sh52.8321 352.87 mo(\000\001)sh54.0222 352.098 mo(\000\001)sh55.2208 353.913 mo(\000\001)sh56.4193 345.443 mo(\000\001)sh57.6179 347.27 mo(\000\001)sh58.8165 346.54 mo(\000\001)sh60.015 345.666 mo(\000\001)sh61.2136 344.649 mo(\000\001)sh62.4037 341.619 mo(\000\001)sh63.6023 330.439 mo(\000\001)sh64.8008 327.823 mo(\000\001)sh65.9994 324.333 mo(\000\001)sh67.198 325.552 mo(\000\001)sh68.3966 340.809 mo(\000\001)sh69.5867 348.038 mo(\000\001)sh70.7852 350.452 mo(\000\001)sh71.9838 352.651 mo(\000\001)sh73.1824 358.361 mo(\000\001)sh74.3809 334.014 mo(\000\001)sh75.5795 331.355 mo(\000\001)sh76.7781 331.414 mo(\000\001)sh77.9682 325.848 mo(\000\001)sh79.1668 336.588 mo(\000\001)sh80.3653 338.281 mo(\000\001)sh81.5639 335.989 mo(\000\001)sh82.7625 342.467 mo(\000\001)sh83.961 347.274 mo(\000\001)sh85.1512 333.647 mo(\000\001)sh86.3497 335.71 mo(\000\001)sh87.5483 314.976 mo(\000\001)sh88.7468 310.283 mo(\000\001)sh89.9454 317.369 mo(\000\001)sh91.144 318.542 mo(\000\001)sh92.3426 316.943 mo(\000\001)sh93.5327 339.226 mo(\000\001)sh94.7312 331.731 mo(\000\001)sh95.9298 333.908 mo(\000\001)sh97.1284 327.122 mo(\000\001)sh98.3269 325.333 mo(\000\001)sh99.5255 322.969 mo(\000\001)sh100.716 327.878 mo(\000\001)sh101.914 333.946 mo(\000\001)sh103.113 346.81 mo(\000\001)sh104.311 346.308 mo(\000\001)sh105.51 352.625 mo(\000\001)sh106.708 353.6 mo(\000\001)sh107.907 347.295 mo(\000\001)sh109.097 345.805 mo(\000\001)sh110.296 340.395 mo(\000\001)sh111.494 335.765 mo(\000\001)sh112.693 337.93 mo(\000\001)sh113.891 346.607 mo(\000\001)sh115.09 344.202 mo(\000\001)sh116.28 346.953 mo(\000\001)sh117.479 342.691 mo(\000\001)sh118.677 344.869 mo(\000\001)sh119.876 333.132 mo(\000\001)sh121.074 334.786 mo(\000\001)sh122.273 339.808 mo(\000\001)sh123.472 350.823 mo(\000\001)sh124.662 348.726 mo(\000\001)sh125.86 351.963 mo(\000\001)sh127.059 349.629 mo(\000\001)sh128.257 349.844 mo(\000\001)sh129.456 341.475 mo(\000\001)sh130.654 339.597 mo(\000\001)sh131.853 336.909 mo(\000\001)sh133.043 331.279 mo(\000\001)sh134.242 329.253 mo(\000\001)sh135.44 336.377 mo(\000\001)sh136.639 333.123 mo(\000\001)sh137.837 332.423 mo(\000\001)sh139.036 342.455 mo(\000\001)sh140.226 339.517 mo(\000\001)sh141.425 346.785 mo(\000\001)sh142.623 339.475 mo(\000\001)sh143.822 340.011 mo(\000\001)sh145.02 341.53 mo(\000\001)sh146.219 348.924 mo(\000\001)sh147.417 351.047 mo(\000\001)sh148.608 355.871 mo(\000\001)sh149.806 354.322 mo(\000\001)sh151.005 349.785 mo(\000\001)sh152.203 344.59 mo(\000\001)sh153.402 348.156 mo(\000\001)sh154.6 343.497 mo(\000\001)sh155.791 337.951 mo(\000\001)sh156.989 332.571 mo(\000\001)sh158.188 333.014 mo(\000\001)sh159.386 335.364 mo(\000\001)sh160.585 341.091 mo(\000\001)sh161.783 340.26 mo(\000\001)sh162.982 348.291 mo(\000\001)sh164.172 349.882 mo(\000\001)sh165.371 336.593 mo(\000\001)sh166.569 335.626 mo(\000\001)sh167.768 335.689 mo(\000\001)sh168.966 335.061 mo(\000\001)sh170.165 337.989 mo(\000\001)sh171.355 345.312 mo(\000\001)sh172.554 349.819 mo(\000\001)sh173.752 353.009 mo(\000\001)sh174.951 357.335 mo(\000\001)sh176.149 349.418 mo(\000\001)sh177.348 348.625 mo(\000\001)sh178.546 344.269 mo(\000\001)sh179.737 344.447 mo(\000\001)sh180.935 339.509 mo(\000\001)sh182.134 338.42 mo(\000\001)sh183.332 318.728 mo(\000\001)sh184.531 321.357 mo(\000\001)sh185.729 321.492 mo(\000\001)sh186.92 328.722 mo(\000\001)sh188.118 329.481 mo(\000\001)sh189.317 337.719 mo(\000\001)sh190.515 343.725 mo(\000\001)sh191.714 346.485 mo(\000\001)sh1 lc
10 ml
42.4883 378.226 mo
200.7 379.066 li
200.7 228.4 li
42.4883 228.4 li
cp
.519554 .434363 .434363 .0791638 cmyk
@
grestore
grestore
0 lc
42.5278 388.414 mo
42.5278 385.369 li
.75021 .679683 .670222 .90164 cmyk
@
102.306 388.414 mo
102.306 385.369 li
@
162.077 388.414 mo
162.077 385.369 li
@
%ADOBeginSubsetFont: SNWAAA+Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /SNWAAA+Helvetica def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 97 /a putdup 100 /d putdup 115 /s putdup 116 /t putdup 121 /y putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IAACHQ+Helvetica /SNWAAA+Helvetica findfont ct_VMDictPut/IAACHQ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 43{/.notdef}rp /a 2{/.notdef}rp /d 14{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]IAACHQ+Helvetica nfIAACHQ+Helvetica*1 [7.1652 0 0 -7.1652 0 0 ]msf40.5344 395.587 mo(0)sh98.3217 395.587 mo(50)[3.98385 0 ]xsh156.102 395.587 mo(100)[3.98384 3.98386 0 ]xshIAACHQ+Helvetica*1 [8.59824 0 0 -8.59824 0 0 ]msf98.1139 404.343 mo(t \(days\))[2.38165 2.38165 2.86315 4.78062 4.78062 4.29912 4.32491 0 ]xshIAACHQ+Helvetica*1 [7.1652 0 0 -7.1652 0 0 ]msf25.3554 380.806 mo(0.0)[3.98385 1.98471 0 ]xsh25.3554 352.267 mo(0.1)[3.98385 1.98471 0 ]xsh25.3554 323.728 mo(0.2)[3.98385 1.98471 0 ]xsh25.3554 295.189 mo(0.3)[3.98385 1.98471 0 ]xsh25.3554 266.65 mo(0.4)[3.98385 1.98471 0 ]xsh25.3554 238.111 mo(0.5)[3.98385 1.98471 0 ]xsh37.3437 378.235 mo
40.3889 378.235 li
@
37.3437 349.694 mo
40.3889 349.694 li
@
37.3437 321.157 mo
40.3889 321.157 li
@
37.3437 292.616 mo
40.3889 292.616 li
@
37.3437 264.078 mo
40.3889 264.078 li
@
37.3437 235.538 mo
40.3889 235.538 li
@
%ADOBeginSubsetFont: SNWAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHQ+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/V <1C60D8A8C9B64EDFA60949676B75C625C6948873966B83A549B84A6BD5D6EE9C83058CE085EB61> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHQ+Helvetica /Encoding getdup 86 /V putpop%ADOEndSubsetFont
/IAACHQ+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 32{/.notdef}rp /V 10{/.notdef}rp /a 2{/.notdef}rp /d 14{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]IAACHQ+Helvetica nfIAACHQ+Helvetica*1 [0 -8.59824 -8.59824 0 0 0 ]msf22.7759 309.755 mo(V)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/IAACHO+ZapfDingbatsITC-Identity-H uf/IAACHO+ZapfDingbatsITC /CIDFont ur/IAACHQ+Helvetica*1 uf/IAACHQ+Helvetica uf/SNWAAA+Helvetica uf/IAACHP+Helvetica*1 uf/IAACHP+Helvetica uf/JFFQMX+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
