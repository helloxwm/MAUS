%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Fig2.pdf
%%Creator: (Adobe Acrobat 11.0.18)
%%For: martijm
%%CreationDate: 14/12/16, 23:25
%%BoundingBox: 0 0 522 275
%%HiResBoundingBox: 0 0 522 275
%%CropBox: 0 0 522 275
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 850 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="cairo 1.14.0 (http://cairographics.org)"
   xmp:ModifyDate="2016-09-21T19:12+02:00"
   xmp:CreateDate="2016-09-21T19:12+02:00"
   xmp:MetadataDate="2016-09-21T19:12+02:00"
   pdf:Producer="cairo 1.14.0 (http://cairographics.org)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:809fe767-3fcc-0240-926c-d8a6aad88771"
   xmpMM:InstanceID="uuid:fe455cf5-c086-3949-ae6b-b8e61f63e124"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -275 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 275 li
522 275 li
522 0 li
cp
clp
gsave
6.46021 265.01 mo
512.359 265.01 li
512.359 4.66501 li
6.46021 4.66501 li
cp
clp
gsave
28.8398 248.95 mo
512.359 248.95 li
512.359 10.64 li
28.8398 10.64 li
cp
clp
.4 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.801 16.199 mo
506.801 16.199 li
506.801 229.679 li
47.801 229.679 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
@
47.801 229.68 mo
506.801 229.68 li
.75021 .679683 .670222 .90164 cmyk
@
47.801 16.199 mo
506.801 16.199 li
@
47.801 229.68 mo
47.801 16.199 li
@
506.801 229.68 mo
506.801 16.199 li
@
47.801 229.68 mo
506.801 229.68 li
@
47.801 229.68 mo
47.801 16.199 li
@
58.48 229.68 mo
58.48 234.238 li
@
58.48 16.199 mo
58.48 11.641 li
@
%ADOBeginSubsetFont: VMDAAA+BitstreamVeraSans-Roman-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (VMDAAA+BitstreamVeraSans-Roman)%%Title: (VMDAAA+BitstreamVeraSans-Roman Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /VMDAAA+BitstreamVeraSans-Roman def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-183 -236 1287 928} def/FontInfo 4 dict dup begin/FSType 4 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 2 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 2 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |1 <001C60D8A8C9B6BBBB4EEAB19F80A665D30B48E9611400> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /VMDAAA+BitstreamVeraSans-Roman-Identity-H /Identity-H 0 [/VMDAAA+BitstreamVeraSans-Roman] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IAACHJ+BitstreamVeraSans-Roman /VMDAAA+BitstreamVeraSans-Roman-Identity-H findfont ct_VMDictPutIAACHJ+BitstreamVeraSans-Roman [10 0 0 -10 0 0 ]msf49.7199 246.6 mo(\000\001)sh%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /OTRPMX+BitstreamVeraSans-Roman def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdef/FontBBox {-183 -236 1287 928} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/two <1C60D8A8C9B67106DDBFF475DEFE9F19DFD94D54C9BE3EA8EA6331B53BE178AF4437F18A4DF8B7CA0160474BDAFDFFFFD21F00C53FF34FC658E9FC5473C834620A3BDC3FD78D19D527326E4032B81E9C1451AA9CCEED2E1D9A01CE303970E714FDD0DC942D5BC47125365912CDFB95A33344EC28099B489264DF88BB7243AD5366056C4A98172ABC33CEBE> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman /OTRPMX+BitstreamVeraSans-Roman findfont ct_VMDictPut/IAACHK+BitstreamVeraSans-Roman*1 [50{/.notdef}rp /two 205{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf55.7699 246.6 mo(2)sh101.199 229.68 mo
101.199 234.238 li
@
101.199 16.199 mo
101.199 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B67106DDF6A49A7E22A99FC57A9B36C6D963E4CCC8C1E3DEE3E4782193F8BCF88B146434BC5EADF3E86B8C5D8991992ADCC87067717D668C2205376D5BA7B197C322E68984190BA443158441707724E22A276188931E38167563D4CBABA997CD04941C312BC446D6EAFE06059A01C5750B4A6AA3F8334A68CA02D190B1590DA3B75038> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf98.44 246.6 mo(0)sh143.922 229.68 mo
143.922 234.238 li
@
143.922 16.199 mo
143.922 11.641 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf141.16 246.6 mo(2)sh186.641 229.68 mo
186.641 234.238 li
@
186.641 16.199 mo
186.641 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B67106DDBD915AC33897E89CBE0FD386C727CCE8E7AC3CF271AB602C6CF79566B584CCE83F3E259F8F285298A61D9DD8C1> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /.notdef /two /.notdef /four 203{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf183.88 246.6 mo(4)sh229.238 229.68 mo
229.238 234.238 li
@
229.238 16.199 mo
229.238 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B67106DDF448EC8605F46E55D8A68463DA53299FCC153DEF3996D5641BC478AB417E3F925DC1F1CF1761A50CF80944E7E184F9FD6BD3C9A684133D91312F5B071DAB7815771C3D5F21E1B88C20D94F29D553990EACFFB4BF8A3323BC8B683A5C8479FC49C1EBD575BE443630888AA0D0472590F938C8942B8850F20FA611B6B2C121F8DA6F1D1C8BEF57C6D4D60C154AAF2C0940A8B18819710E44AA61CA6984F755F1EEA2961A0766ABDB462CE58AB2C8B4A20F8971A7789D083C> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six 201{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf226.48 246.6 mo(6)sh271.961 229.68 mo
271.961 234.238 li
@
271.961 16.199 mo
271.961 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B67106DDF2D55DC3A7F50ABD195B02A64EF1DE2483E53F87CA642B76573A57934583FFF4D48562903E5873A7B8F61DE173BD9EB5F8862ABC874A921C01F0EBE0BC3F8384455A966B06D98F7AF2C603D3B596D5D7A8132E45563B09E93A99D676669DE5066DB14C262317391C0AD138606F1BA8B828C8FD84C2EDC2A772DB0DB78EB1AF7C93C1684FA2CFE766F7C4A2F39925FA256A0FE71F8B70D4F3ADCACAD40A256FB3A8CD83A15C7805EC15DD018F459E48AC4F7AB5D3F21DA973661BB211BB1C96B361B755E94D29C76B9E299CEB63662066DBD0B4EF5ED97889742F342FE1178B8B5F411B5A546B79F799F2BC5A654CFB7380> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf269.2 246.6 mo(8)sh314.68 229.68 mo
314.68 234.238 li
@
314.68 16.199 mo
314.68 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B67106D2C47EEB479FDD8C9CA5862544165075B1AA09588B8CB9DA2B417452E508E9E3AD59> |-/three <1C60D8A8C9B67106DD3F349C001FE4FD4FC638CC78B1567906F040D5CC7871C68D9F501A3941CA0608E5E4AAF51CBF52747C52F6D155C4D99A2EF6DC1634865D445D53D47C4C8623525037301CA127F52D108BBE18EA1CA9C3D7BD1AA814DE08FBF3C16C486D60F2426A95CBAE8F350384970C80F20793F816A0E86C1C5DABC5DB22BA6B2C39F3E2F1BABD714BE177CB4A63E01EDF3C251E7D1123396B4DF5C90F6E43EF3522356C82EFEDBCB9012D7E0CB0FDE626DD640992B175A84C00B21E74> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 49 /one putdup 51 /three putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /one /two /three /four /.notdef /six /.notdef /eight 199{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf309.16 246.6 mo(13)[5.54001 0 ]xsh357.281 229.68 mo
357.281 234.238 li
@
357.281 16.199 mo
357.281 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B67106D2D4B881D8E14BE5645D4E1321E3FA9525A1471B301AAFA44C9CFBA2A4C585860839AEA159D18E74F60F42A0EA39D307BD31C45DFC8103A45FD99CFD9199F4B5C94BF816546A20F38F14046F65F1669E57F949E42C737CEC44BD6964676BB7B9E4DE5605D5B8B055AE1DF3D7956A6A923E5310160653545874B1BC8C5342DF2123C3806A> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf351.76 246.6 mo(15)[5.54001 0 ]xsh400 229.68 mo
400 234.238 li
@
400 16.199 mo
400 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B67106F88065FC2BA3DE0DE1E2692D3F77E6149FF32C0EF8CB4E146090> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight 199{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf394.48 246.6 mo(17)[5.54001 0 ]xsh442.719 229.68 mo
442.719 234.238 li
@
442.719 16.199 mo
442.719 11.641 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B67106D28518C18F5B1A9F4107C8D04AF04144E3DCDD46B26BF8B29DFE8D94CBB4CBBFFD2EA7876685F5C88C280643CFCAC39F7E930A02D5872C7E3753F53459F138B8B9481E2741132E72D21F12B3D43BC47DD5AAFBA9682CBF7090197E0526136AC44C2AE32914A4F530EA5965F09A151272F7277EBFD541B6CFDB7E4342168D883590376B7CC7805F997889C009CC032190E48AF0575E2DAFAF16B85EEF71186881D561AFFD8E685A889783734E5C61F0E5BF355555B8CFA2> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf437.2 246.6 mo(19)[5.54001 0 ]xsh485.441 229.68 mo
485.441 234.238 li
@
485.441 16.199 mo
485.441 11.641 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf479.92 246.6 mo(21)[5.54001 0 ]xsh47.801 229.68 mo
43.238 229.68 li
@
506.801 229.68 mo
511.359 229.68 li
@
IAACHJ+BitstreamVeraSans-Roman [10 0 0 -10 0 0 ]msf28.8398 233.4 mo(\000\001)shIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8898 233.4 mo(4)sh47.801 208.32 mo
43.238 208.32 li
@
506.801 208.32 mo
511.359 208.32 li
@
IAACHJ+BitstreamVeraSans-Roman [10 0 0 -10 0 0 ]msf28.8398 212.04 mo(\000\001)shIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8898 212.04 mo(3)sh47.801 186.961 mo
43.238 186.961 li
@
506.801 186.961 mo
511.359 186.961 li
@
IAACHJ+BitstreamVeraSans-Roman [10 0 0 -10 0 0 ]msf28.8398 190.68 mo(\000\001)shIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8898 190.68 mo(2)sh47.801 165.602 mo
43.238 165.602 li
@
506.801 165.602 mo
511.359 165.602 li
@
IAACHJ+BitstreamVeraSans-Roman [10 0 0 -10 0 0 ]msf28.8398 169.32 mo(\000\001)shIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8898 169.32 mo(1)sh47.801 144.238 mo
43.238 144.238 li
@
506.801 144.238 mo
511.359 144.238 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8398 147.96 mo(0)sh47.801 123 mo
43.238 123 li
@
506.801 123 mo
511.359 123 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8398 126.72 mo(1)sh47.801 101.641 mo
43.238 101.641 li
@
506.801 101.641 mo
511.359 101.641 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8398 105.36 mo(2)sh47.801 80.281 mo
43.238 80.281 li
@
506.801 80.281 mo
511.359 80.281 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8398 84 mo(3)sh47.801 58.922 mo
43.238 58.922 li
@
506.801 58.922 mo
511.359 58.922 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8398 62.64 mo(4)sh47.801 37.559 mo
43.238 37.559 li
@
506.801 37.559 mo
511.359 37.559 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8398 41.28 mo(5)sh47.801 16.199 mo
43.238 16.199 li
@
506.801 16.199 mo
511.359 16.199 li
@
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf34.8398 19.92 mo(6)sh47.801 229.68 mo
506.801 229.68 li
@
47.801 16.199 mo
506.801 16.199 li
@
47.801 229.68 mo
47.801 16.199 li
@
506.801 229.68 mo
506.801 16.199 li
@
grestore
gsave
57 188 mo
145 188 li
145 100 li
57 100 li
cp
clp
116.801 158.879 mo
118.121 157.32 li
119.32 155.52 li
120.398 153.602 li
121.238 151.68 li
121.84 149.641 li
122.32 147.602 li
122.559 145.441 li
122.559 143.281 li
122.32 141.121 li
121.961 139.078 li
121.238 137.039 li
120.52 135.121 li
119.441 133.199 li
118.238 131.398 li
116.922 129.84 li
115.359 128.281 li
113.68 126.961 li
111.879 125.762 li
109.961 124.801 li
108.039 124.078 li
106 123.48 li
103.84 123.121 li
101.801 123 li
99.641 123 li
97.48 123.238 li
95.441 123.719 li
93.398 124.441 li
91.48 125.281 li
89.559 126.359 li
87.879 127.68 li
86.32 129 li
84.879 130.559 li
83.559 132.359 li
82.48 134.16 li
81.52 136.078 li
80.801 138.121 li
80.32 140.16 li
79.961 142.199 li
79.84 144.359 li
79.961 146.52 li
80.32 148.559 li
80.801 150.719 li
81.641 152.641 li
82.48 154.559 li
83.68 156.359 li
85 158.16 li
86.441 159.602 li
88 161.039 li
89.801 162.238 li
91.602 163.32 li
93.52 164.16 li
95.559 164.879 li
97.719 165.359 li
99.762 165.602 li
101.922 165.602 li
104.078 165.48 li
106.121 165 li
108.16 164.398 li
110.199 163.68 li
112.121 162.602 li
113.801 161.52 li
115.48 160.078 li
117.039 158.641 li
false sop
.297246 .156161 .0367437 0 cmyk
ef
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
116.801 158.879 mo
118.121 157.32 li
119.32 155.52 li
120.398 153.602 li
121.238 151.68 li
121.84 149.641 li
122.32 147.602 li
122.559 145.441 li
122.559 143.281 li
122.32 141.121 li
121.961 139.078 li
121.238 137.039 li
120.52 135.121 li
119.441 133.199 li
118.238 131.398 li
116.922 129.84 li
115.359 128.281 li
113.68 126.961 li
111.879 125.762 li
109.961 124.801 li
108.039 124.078 li
106 123.48 li
103.84 123.121 li
101.801 123 li
99.641 123 li
97.48 123.238 li
95.441 123.719 li
93.398 124.441 li
91.48 125.281 li
89.559 126.359 li
87.879 127.68 li
86.32 129 li
84.879 130.559 li
83.559 132.359 li
82.48 134.16 li
81.52 136.078 li
80.801 138.121 li
80.32 140.16 li
79.961 142.199 li
79.84 144.359 li
79.961 146.52 li
80.32 148.559 li
80.801 150.719 li
81.641 152.641 li
82.48 154.559 li
83.68 156.359 li
85 158.16 li
86.441 159.602 li
88 161.039 li
89.801 162.238 li
91.602 163.32 li
93.52 164.16 li
95.559 164.879 li
97.719 165.359 li
99.762 165.602 li
101.922 165.602 li
104.078 165.48 li
106.121 165 li
108.16 164.398 li
110.199 163.68 li
112.121 162.602 li
113.801 161.52 li
115.48 160.078 li
117.039 158.641 li
116.801 158.879 li
@
2 lw
[6 6 ] 0 dsh
143.922 144.238 mo
143.68 140.039 li
143.078 135.84 li
142 131.641 li
140.559 127.68 li
138.641 123.84 li
136.48 120.238 li
133.84 116.762 li
130.961 113.641 li
127.719 110.879 li
124.238 108.359 li
120.641 106.199 li
116.68 104.52 li
112.602 103.199 li
108.52 102.238 li
104.199 101.762 li
100 101.641 li
95.68 102 li
91.48 102.719 li
87.398 103.922 li
83.441 105.48 li
79.719 107.398 li
76.121 109.801 li
72.762 112.441 li
69.762 115.441 li
67 118.68 li
64.602 122.281 li
62.68 126 li
61 129.961 li
59.801 134.039 li
58.961 138.238 li
58.602 142.559 li
58.602 146.762 li
59.082 150.961 li
59.918 155.16 li
61.238 159.238 li
62.918 163.199 li
64.961 166.922 li
67.48 170.398 li
70.238 173.641 li
73.359 176.641 li
76.719 179.16 li
80.32 181.441 li
84.16 183.359 li
88.121 184.922 li
92.199 186 li
96.398 186.719 li
100.719 186.961 li
104.922 186.84 li
109.121 186.238 li
113.32 185.16 li
117.398 183.84 li
121.238 182.039 li
124.84 179.762 li
128.32 177.238 li
131.441 174.359 li
134.32 171.238 li
136.84 167.762 li
139 164.16 li
140.801 160.199 li
142.238 156.238 li
143.199 152.039 li
143.801 147.84 li
@
grestore
gsave
63 213 mo
141 213 li
141 135 li
63 135 li
cp
clp
137.559 144 mo
140.559 140.039 li
137.559 136.078 li
134.559 140.039 li
137.559 144 li
false sop
.883665 .769161 0 0 cmyk
ef
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
137.559 144 mo
140.559 140.039 li
137.559 136.078 li
134.559 140.039 li
cp
@
79.84 188.762 mo
82.84 184.801 li
79.84 180.84 li
76.84 184.801 li
79.84 188.762 li
ef
79.84 188.762 mo
82.84 184.801 li
79.84 180.84 li
76.84 184.801 li
cp
@
133.238 146.16 mo
136.238 142.199 li
133.238 138.238 li
130.238 142.199 li
133.238 146.16 li
ef
133.238 146.16 mo
136.238 142.199 li
133.238 138.238 li
130.238 142.199 li
cp
@
124.719 158.879 mo
127.719 154.922 li
124.719 150.961 li
121.719 154.922 li
124.719 158.879 li
ef
124.719 158.879 mo
127.719 154.922 li
124.719 150.961 li
121.719 154.922 li
cp
@
133.238 146.16 mo
136.238 142.199 li
133.238 138.238 li
130.238 142.199 li
133.238 146.16 li
ef
133.238 146.16 mo
136.238 142.199 li
133.238 138.238 li
130.238 142.199 li
cp
@
124.719 158.879 mo
127.719 154.922 li
124.719 150.961 li
121.719 154.922 li
124.719 158.879 li
ef
124.719 158.879 mo
127.719 154.922 li
124.719 150.961 li
121.719 154.922 li
cp
@
67.121 212.281 mo
70.121 208.32 li
67.121 204.359 li
64.121 208.32 li
67.121 212.281 li
ef
67.121 212.281 mo
70.121 208.32 li
67.121 204.359 li
64.121 208.32 li
cp
@
67.121 212.281 mo
70.121 208.32 li
67.121 204.359 li
64.121 208.32 li
67.121 212.281 li
ef
67.121 212.281 mo
70.121 208.32 li
67.121 204.359 li
64.121 208.32 li
cp
@
122.559 171.719 mo
125.559 167.762 li
122.559 163.801 li
119.559 167.762 li
122.559 171.719 li
ef
122.559 171.719 mo
125.559 167.762 li
122.559 163.801 li
119.559 167.762 li
cp
@
88.359 186.719 mo
91.359 182.762 li
88.359 178.801 li
85.359 182.762 li
88.359 186.719 li
ef
88.359 186.719 mo
91.359 182.762 li
88.359 178.801 li
85.359 182.762 li
cp
@
103.359 167.398 mo
106.359 163.441 li
103.359 159.48 li
100.359 163.441 li
103.359 167.398 li
ef
103.359 167.398 mo
106.359 163.441 li
103.359 159.48 li
100.359 163.441 li
cp
@
97 156.84 mo
100 152.879 li
97 148.922 li
94 152.879 li
97 156.84 li
ef
97 156.84 mo
100 152.879 li
97 148.922 li
94 152.879 li
cp
@
101.199 173.879 mo
104.199 169.922 li
101.199 165.961 li
98.199 169.922 li
101.199 173.879 li
ef
101.199 173.879 mo
104.199 169.922 li
101.199 165.961 li
98.199 169.922 li
cp
@
90.52 178.078 mo
93.52 174.121 li
90.52 170.16 li
87.52 174.121 li
90.52 178.078 li
ef
90.52 178.078 mo
93.52 174.121 li
90.52 170.16 li
87.52 174.121 li
cp
@
73.48 195.238 mo
76.48 191.281 li
73.48 187.32 li
70.48 191.281 li
73.48 195.238 li
ef
73.48 195.238 mo
76.48 191.281 li
73.48 187.32 li
70.48 191.281 li
cp
@
86.32 188.762 mo
89.32 184.801 li
86.32 180.84 li
83.32 184.801 li
86.32 188.762 li
ef
86.32 188.762 mo
89.32 184.801 li
86.32 180.84 li
83.32 184.801 li
cp
@
grestore
gsave
60 222 mo
158 222 li
158 124 li
60 124 li
cp
clp
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
118.238 140.039 mo
156.762 140.039 li
false sop
.883665 .769161 0 0 cmyk
@
118.238 141.48 mo
118.238 138.48 li
@
156.762 141.48 mo
156.762 138.48 li
@
137.559 154.922 mo
137.559 125.039 li
@
135.641 154.922 mo
139.48 154.922 li
@
135.641 125.039 mo
139.48 125.039 li
@
71.32 184.801 mo
88.359 184.801 li
@
71.32 186.359 mo
71.32 183.359 li
@
88.359 186.359 mo
88.359 183.359 li
@
79.84 199.801 mo
79.84 169.922 li
@
79 199.801 mo
80.68 199.801 li
@
79 169.922 mo
80.68 169.922 li
@
118.238 142.199 mo
148.121 142.199 li
@
118.238 143.398 mo
118.238 140.879 li
@
148.121 143.398 mo
148.121 140.879 li
@
133.238 154.922 mo
133.238 129.359 li
@
131.68 154.922 mo
134.68 154.922 li
@
131.68 129.359 mo
134.68 129.359 li
@
107.68 154.922 mo
141.762 154.922 li
@
107.68 156.48 mo
107.68 153.48 li
@
141.762 156.48 mo
141.762 153.48 li
@
124.719 169.922 mo
124.719 140.039 li
@
123.039 169.922 mo
126.398 169.922 li
@
123.039 140.039 mo
126.398 140.039 li
@
118.238 142.199 mo
148.121 142.199 li
@
118.238 143.398 mo
118.238 140.879 li
@
148.121 143.398 mo
148.121 140.879 li
@
133.238 154.922 mo
133.238 129.359 li
@
131.68 154.922 mo
134.68 154.922 li
@
131.68 129.359 mo
134.68 129.359 li
@
107.68 154.922 mo
141.762 154.922 li
@
107.68 156.48 mo
107.68 153.48 li
@
141.762 156.48 mo
141.762 153.48 li
@
124.719 169.922 mo
124.719 140.039 li
@
123.039 169.922 mo
126.398 169.922 li
@
123.039 140.039 mo
126.398 140.039 li
@
60.641 208.32 mo
73.48 208.32 li
@
60.641 209.641 mo
60.641 207 li
@
73.48 209.641 mo
73.48 207 li
@
67.121 221.16 mo
67.121 195.48 li
@
66.398 221.16 mo
67.719 221.16 li
@
66.398 195.48 mo
67.719 195.48 li
@
60.641 208.32 mo
73.48 208.32 li
@
60.641 209.641 mo
60.641 207 li
@
73.48 209.641 mo
73.48 207 li
@
67.121 221.16 mo
67.121 195.48 li
@
66.398 221.16 mo
67.719 221.16 li
@
66.398 195.48 mo
67.719 195.48 li
@
109.719 167.762 mo
135.398 167.762 li
@
109.719 168.84 mo
109.719 166.68 li
@
135.398 168.84 mo
135.398 166.68 li
@
122.559 178.441 mo
122.559 157.078 li
@
121.238 178.441 mo
123.879 178.441 li
@
121.238 157.078 mo
123.879 157.078 li
@
79.84 182.762 mo
97 182.762 li
@
79.84 183.961 mo
79.84 181.441 li
@
97 183.961 mo
97 181.441 li
@
88.359 195.48 mo
88.359 169.922 li
@
87.52 195.48 mo
89.32 195.48 li
@
87.52 169.922 mo
89.32 169.922 li
@
88.359 163.441 mo
118.238 163.441 li
@
88.359 165 mo
88.359 162 li
@
118.238 165 mo
118.238 162 li
@
103.359 178.441 mo
103.359 148.559 li
@
101.801 178.441 mo
104.801 178.441 li
@
101.801 148.559 mo
104.801 148.559 li
@
84.16 152.879 mo
109.719 152.879 li
@
84.16 154.559 mo
84.16 151.078 li
@
109.719 154.559 mo
109.719 151.078 li
@
97 169.922 mo
97 135.719 li
@
95.68 169.922 mo
98.199 169.922 li
@
95.68 135.719 mo
98.199 135.719 li
@
90.52 169.922 mo
111.879 169.922 li
@
90.52 171.121 mo
90.52 168.602 li
@
111.879 171.121 mo
111.879 168.602 li
@
101.199 182.762 mo
101.199 157.078 li
@
100.121 182.762 mo
102.281 182.762 li
@
100.121 157.078 mo
102.281 157.078 li
@
77.801 174.121 mo
103.359 174.121 li
@
77.801 175.922 mo
77.801 172.441 li
@
103.359 175.922 mo
103.359 172.441 li
@
90.52 191.281 mo
90.52 157.078 li
@
89.32 191.281 mo
91.84 191.281 li
@
89.32 157.078 mo
91.84 157.078 li
@
64.961 191.281 mo
82 191.281 li
@
64.961 192.48 mo
64.961 189.961 li
@
82 192.48 mo
82 189.961 li
@
73.48 204 mo
73.48 178.441 li
@
72.641 204 mo
74.32 204 li
@
72.641 178.441 mo
74.32 178.441 li
@
77.801 184.801 mo
94.84 184.801 li
@
77.801 186.121 mo
77.801 183.602 li
@
94.84 186.121 mo
94.84 183.602 li
@
86.32 197.641 mo
86.32 172.078 li
@
85.48 197.641 mo
87.16 197.641 li
@
85.48 172.078 mo
87.16 172.078 li
@
grestore
gsave
73 216 mo
162 216 li
162 126 li
73 126 li
cp
clp
156.398 126.961 mo
161.199 126.961 li
161.199 131.762 li
156.398 131.762 li
cp
false sop
.853666 .140993 .973449 .0191043 cmyk
ef
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
156.398 126.961 mo
161.199 126.961 li
161.199 131.762 li
156.398 131.762 li
cp
@
98.801 176.039 mo
103.602 176.039 li
103.602 180.84 li
98.801 180.84 li
cp
ef
98.801 176.039 mo
103.602 176.039 li
103.602 180.84 li
98.801 180.84 li
cp
@
73.602 210.238 mo
78.399 210.238 li
78.399 215.039 li
73.602 215.039 li
cp
ef
73.602 210.238 mo
78.399 210.238 li
78.399 215.039 li
73.602 215.039 li
cp
@
109.48 167.52 mo
114.281 167.52 li
114.281 172.321 li
109.48 172.321 li
cp
ef
109.48 167.52 mo
114.281 167.52 li
114.281 172.321 li
109.48 172.321 li
cp
@
133 139.801 mo
137.801 139.801 li
137.801 144.602 li
133 144.602 li
cp
ef
133 139.801 mo
137.801 139.801 li
137.801 144.602 li
133 144.602 li
cp
@
111.641 150.48 mo
116.442 150.48 li
116.442 155.281 li
111.641 155.281 li
cp
ef
111.641 150.48 mo
116.442 150.48 li
116.442 155.281 li
111.641 155.281 li
cp
@
139.359 141.84 mo
144.16 141.84 li
144.16 146.641 li
139.359 146.641 li
cp
ef
139.359 141.84 mo
144.16 141.84 li
144.16 146.641 li
139.359 146.641 li
cp
@
109.48 163.199 mo
114.281 163.199 li
114.281 168 li
109.48 168 li
cp
ef
109.48 163.199 mo
114.281 163.199 li
114.281 168 li
109.48 168 li
cp
@
139.359 144 mo
144.16 144 li
144.16 148.801 li
139.359 148.801 li
cp
ef
139.359 144 mo
144.16 144 li
144.16 148.801 li
139.359 148.801 li
cp
@
100.961 161.039 mo
105.762 161.039 li
105.762 165.84 li
100.961 165.84 li
cp
ef
100.961 161.039 mo
105.762 161.039 li
105.762 165.84 li
100.961 165.84 li
cp
@
grestore
gsave
73 226 mo
179 226 li
179 112 li
73 112 li
cp
clp
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
139.602 129.359 mo
178 129.359 li
false sop
.853666 .140993 .973449 .0191043 cmyk
@
139.602 131.039 mo
139.602 127.68 li
@
178 131.039 mo
178 127.68 li
@
158.801 146.398 mo
158.801 112.32 li
@
156.879 146.398 mo
160.719 146.398 li
@
156.879 112.32 mo
160.719 112.32 li
@
94.84 178.441 mo
107.68 178.441 li
@
94.84 179.879 mo
94.84 176.879 li
@
107.68 179.879 mo
107.68 176.879 li
@
101.199 193.32 mo
101.199 163.441 li
@
100.602 193.32 mo
101.801 193.32 li
@
100.602 163.441 mo
101.801 163.441 li
@
73.48 212.641 mo
78.641 212.641 li
@
73.48 213.84 mo
73.48 211.32 li
@
78.641 213.84 mo
78.641 211.32 li
@
76 225.359 mo
76 199.801 li
@
75.762 225.359 mo
76.238 225.359 li
@
75.762 199.801 mo
76.238 199.801 li
@
103.359 169.922 mo
120.398 169.922 li
@
103.359 171.121 mo
103.359 168.602 li
@
120.398 171.121 mo
120.398 168.602 li
@
111.879 182.762 mo
111.879 157.078 li
@
111.039 182.762 mo
112.719 182.762 li
@
111.039 157.078 mo
112.719 157.078 li
@
118.238 142.199 mo
152.441 142.199 li
@
118.238 143.879 mo
118.238 140.398 li
@
152.441 143.879 mo
152.441 140.398 li
@
135.398 159.238 mo
135.398 125.039 li
@
133.602 159.238 mo
137.078 159.238 li
@
133.602 125.039 mo
137.078 125.039 li
@
105.52 152.879 mo
122.559 152.879 li
@
105.52 154.078 mo
105.52 151.559 li
@
122.559 154.078 mo
122.559 151.559 li
@
114.039 165.602 mo
114.039 140.039 li
@
113.199 165.602 mo
114.879 165.602 li
@
113.199 140.039 mo
114.879 140.039 li
@
122.559 144.238 mo
160.961 144.238 li
@
122.559 146.16 mo
122.559 142.32 li
@
160.961 146.16 mo
160.961 142.32 li
@
141.762 163.441 mo
141.762 125.039 li
@
139.84 163.441 mo
143.68 163.441 li
@
139.84 125.039 mo
143.68 125.039 li
@
103.359 165.602 mo
120.398 165.602 li
@
103.359 166.922 mo
103.359 164.398 li
@
120.398 166.922 mo
120.398 164.398 li
@
111.879 178.441 mo
111.879 152.879 li
@
111.039 178.441 mo
112.719 178.441 li
@
111.039 152.879 mo
112.719 152.879 li
@
126.879 146.398 mo
156.762 146.398 li
@
126.879 147.961 mo
126.879 144.961 li
@
156.762 147.961 mo
156.762 144.961 li
@
141.762 161.398 mo
141.762 131.52 li
@
140.32 161.398 mo
143.32 161.398 li
@
140.32 131.52 mo
143.32 131.52 li
@
97 163.441 mo
109.719 163.441 li
@
97 164.762 mo
97 162.238 li
@
109.719 164.762 mo
109.719 162.238 li
@
103.359 176.281 mo
103.359 150.719 li
@
102.762 176.281 mo
103.961 176.281 li
@
102.762 150.719 mo
103.961 150.719 li
@
grestore
gsave
115 143 mo
209 143 li
209 98 li
115 98 li
cp
clp
169.238 116.281 mo
174.039 116.281 li
174.039 121.078 li
169.238 121.078 li
cp
false sop
.627649 0 1 0 cmyk
ef
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
169.238 116.281 mo
174.039 116.281 li
174.039 121.078 li
169.238 121.078 li
cp
@
196.961 99.238 mo
201.762 99.238 li
201.762 104.039 li
196.961 104.039 li
cp
ef
196.961 99.238 mo
201.762 99.238 li
201.762 104.039 li
196.961 104.039 li
cp
@
141.52 122.641 mo
146.321 122.641 li
146.321 127.442 li
141.52 127.442 li
cp
ef
141.52 122.641 mo
146.321 122.641 li
146.321 127.442 li
141.52 127.442 li
cp
@
160.719 116.281 mo
165.52 116.281 li
165.52 121.078 li
160.719 121.078 li
cp
ef
160.719 116.281 mo
165.52 116.281 li
165.52 121.078 li
160.719 121.078 li
cp
@
202.961 101.281 mo
207.762 101.281 li
207.762 106.078 li
202.961 106.078 li
cp
ef
202.961 101.281 mo
207.762 101.281 li
207.762 106.078 li
202.961 106.078 li
cp
@
186.52 105.602 mo
191.321 105.602 li
191.321 110.399 li
186.52 110.399 li
cp
ef
186.52 105.602 mo
191.321 105.602 li
191.321 110.399 li
186.52 110.399 li
cp
@
115.84 137.641 mo
120.641 137.641 li
120.641 142.442 li
115.84 142.442 li
cp
ef
115.84 137.641 mo
120.641 137.641 li
120.641 142.442 li
115.84 142.442 li
cp
@
165.039 114.121 mo
169.84 114.121 li
169.84 118.922 li
165.039 118.922 li
cp
ef
165.039 114.121 mo
169.84 114.121 li
169.84 118.922 li
165.039 118.922 li
cp
@
grestore
gsave
109 151 mo
230 151 li
230 88 li
109 88 li
cp
clp
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
152.441 118.68 mo
190.84 118.68 li
false sop
.627649 0 1 0 cmyk
@
152.441 120 mo
152.441 117.359 li
@
190.84 120 mo
190.84 117.359 li
@
171.641 131.52 mo
171.641 105.84 li
@
169.719 131.52 mo
173.559 131.52 li
@
169.719 105.84 mo
173.559 105.84 li
@
173.801 101.641 mo
225.039 101.641 li
@
173.801 102.84 mo
173.801 100.32 li
@
225.039 102.84 mo
225.039 100.32 li
@
199.359 114.359 mo
199.359 88.801 li
@
196.84 114.359 mo
202 114.359 li
@
196.84 88.801 mo
202 88.801 li
@
131.078 125.039 mo
156.762 125.039 li
@
131.078 126.121 mo
131.078 123.961 li
@
156.762 126.121 mo
156.762 123.961 li
@
143.922 135.719 mo
143.922 114.359 li
@
142.602 135.719 mo
145.238 135.719 li
@
142.602 114.359 mo
145.238 114.359 li
@
146.078 118.68 mo
180.16 118.68 li
@
146.078 119.762 mo
146.078 117.602 li
@
180.16 119.762 mo
180.16 117.602 li
@
163.121 129.359 mo
163.121 108 li
@
161.441 129.359 mo
164.801 129.359 li
@
161.441 108 mo
164.801 108 li
@
181.48 103.68 mo
229.238 103.68 li
@
181.48 105 mo
181.48 102.48 li
@
229.238 105 mo
229.238 102.48 li
@
205.359 116.52 mo
205.359 90.961 li
@
202.961 116.52 mo
207.762 116.52 li
@
202.961 90.961 mo
207.762 90.961 li
@
167.199 108 mo
210.762 108 li
@
167.199 109.078 mo
167.199 106.922 li
@
210.762 109.078 mo
210.762 106.922 li
@
188.922 118.68 mo
188.922 97.32 li
@
186.762 118.68 mo
191.078 118.68 li
@
186.762 97.32 mo
191.078 97.32 li
@
109.719 140.039 mo
126.879 140.039 li
@
109.719 141.121 mo
109.719 138.961 li
@
126.879 141.121 mo
126.879 138.961 li
@
118.238 150.719 mo
118.238 129.359 li
@
117.398 150.719 mo
119.199 150.719 li
@
117.398 129.359 mo
119.199 129.359 li
@
150.281 116.52 mo
184.48 116.52 li
@
150.281 117.84 mo
150.281 115.199 li
@
184.48 117.84 mo
184.48 115.199 li
@
167.441 129.359 mo
167.441 103.68 li
@
165.641 129.359 mo
169.121 129.359 li
@
165.641 103.68 mo
169.121 103.68 li
@
grestore
gsave
103 125 mo
162 125 li
162 108 li
103 108 li
cp
clp
154.719 115.801 mo
160.719 112.32 li
154.719 108.84 li
154.719 115.801 li
false sop
0 .241001 .107607 0 cmyk
ef
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
154.719 115.801 mo
160.719 112.32 li
154.719 108.84 li
cp
@
124.84 122.16 mo
130.84 118.68 li
124.84 115.199 li
124.84 122.16 li
ef
124.84 122.16 mo
130.84 118.68 li
124.84 115.199 li
cp
@
103.48 124.32 mo
109.48 120.84 li
103.48 117.359 li
103.48 124.32 li
ef
103.48 124.32 mo
109.48 120.84 li
103.48 117.359 li
cp
@
141.879 122.16 mo
147.879 118.68 li
141.879 115.199 li
141.879 122.16 li
ef
141.879 122.16 mo
147.879 118.68 li
141.879 115.199 li
cp
@
grestore
gsave
96 136 mo
177 136 li
177 94 li
96 94 li
cp
clp
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
137.559 112.32 mo
175.961 112.32 li
false sop
0 .241001 .107607 0 cmyk
@
137.559 114 mo
137.559 110.52 li
@
175.961 114 mo
175.961 110.52 li
@
156.762 129.359 mo
156.762 95.16 li
@
154.84 129.359 mo
158.68 129.359 li
@
154.84 95.16 mo
158.68 95.16 li
@
109.719 118.68 mo
143.922 118.68 li
@
109.719 120.359 mo
109.719 117 li
@
143.922 120.359 mo
143.922 117 li
@
126.879 135.719 mo
126.879 101.641 li
@
125.078 135.719 mo
128.559 135.719 li
@
125.078 101.641 mo
128.559 101.641 li
@
97 120.84 mo
114.039 120.84 li
@
97 122.039 mo
97 119.52 li
@
114.039 122.039 mo
114.039 119.52 li
@
105.52 133.559 mo
105.52 108 li
@
104.68 133.559 mo
106.359 133.559 li
@
104.68 108 mo
106.359 108 li
@
124.719 118.68 mo
163.121 118.68 li
@
124.719 120.359 mo
124.719 117 li
@
163.121 120.359 mo
163.121 117 li
@
143.922 135.719 mo
143.922 101.641 li
@
142 135.719 mo
145.84 135.719 li
@
142 101.641 mo
145.84 101.641 li
@
grestore
gsave
165 125 mo
215 125 li
215 97 li
165 97 li
cp
clp
208 105.121 mo
214 101.641 li
208 98.16 li
208 105.121 li
false sop
.360113 .879362 0 0 cmyk
ef
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
208 105.121 mo
214 101.641 li
208 98.16 li
cp
@
173.922 122.16 mo
179.922 118.68 li
173.922 115.199 li
173.922 122.16 li
ef
173.922 122.16 mo
179.922 118.68 li
173.922 115.199 li
cp
@
165.398 124.32 mo
171.398 120.84 li
165.398 117.359 li
165.398 124.32 li
ef
165.398 124.32 mo
171.398 120.84 li
165.398 117.359 li
cp
@
grestore
gsave
145 136 mo
241 136 li
241 86 li
145 86 li
cp
clp
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
180.16 101.641 mo
239.922 101.641 li
false sop
.360113 .879362 0 0 cmyk
@
180.16 103.078 mo
180.16 100.078 li
@
239.922 103.078 mo
239.922 100.078 li
@
210.039 116.52 mo
210.039 86.641 li
@
207.039 116.52 mo
213.039 116.52 li
@
207.039 86.641 mo
213.039 86.641 li
@
154.602 118.68 mo
197.32 118.68 li
@
154.602 120.121 mo
154.602 117.121 li
@
197.32 120.121 mo
197.32 117.121 li
@
175.961 133.559 mo
175.961 103.68 li
@
173.801 133.559 mo
178 133.559 li
@
173.801 103.68 mo
178 103.68 li
@
146.078 120.84 mo
188.68 120.84 li
@
146.078 122.281 mo
146.078 119.281 li
@
188.68 122.281 mo
188.68 119.281 li
@
167.441 135.719 mo
167.441 105.84 li
@
165.281 135.719 mo
169.48 135.719 li
@
165.281 105.84 mo
169.48 105.84 li
@
grestore
gsave
121 152 mo
243 152 li
243 105 li
121 105 li
cp
clp
212.68 114.359 mo
212.68 115.816 211.496 117 210.039 117 cv
208.582 117 207.398 115.816 207.398 114.359 cv
207.398 112.902 208.582 111.719 210.039 111.719 cv
211.496 111.719 212.68 112.902 212.68 114.359 cv
false sop
0 .919585 .825986 0 cmyk
f
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
212.68 114.359 mo
212.68 115.816 211.496 117 210.039 117 cv
208.582 117 207.398 115.816 207.398 114.359 cv
207.398 112.902 208.582 111.719 210.039 111.719 cv
211.496 111.719 212.68 112.902 212.68 114.359 cv
@
241.961 108 mo
241.961 109.457 240.777 110.641 239.32 110.641 cv
237.863 110.641 236.68 109.457 236.68 108 cv
236.68 106.543 237.863 105.359 239.32 105.359 cv
240.777 105.359 241.961 106.543 241.961 108 cv
f
241.961 108 mo
241.961 109.457 240.777 110.641 239.32 110.641 cv
237.863 110.641 236.68 109.457 236.68 108 cv
236.68 106.543 237.863 105.359 239.32 105.359 cv
240.777 105.359 241.961 106.543 241.961 108 cv
@
155.078 133.559 mo
155.078 135.02 153.898 136.199 152.441 136.199 cv
150.98 136.199 149.801 135.02 149.801 133.559 cv
149.801 132.102 150.98 130.922 152.441 130.922 cv
153.898 130.922 155.078 132.102 155.078 133.559 cv
f
155.078 133.559 mo
155.078 135.02 153.898 136.199 152.441 136.199 cv
150.98 136.199 149.801 135.02 149.801 133.559 cv
149.801 132.102 150.98 130.922 152.441 130.922 cv
153.898 130.922 155.078 132.102 155.078 133.559 cv
@
127.359 148.559 mo
127.359 150.02 126.18 151.199 124.719 151.199 cv
123.262 151.199 122.078 150.02 122.078 148.559 cv
122.078 147.102 123.262 145.922 124.719 145.922 cv
126.18 145.922 127.359 147.102 127.359 148.559 cv
f
127.359 148.559 mo
127.359 150.02 126.18 151.199 124.719 151.199 cv
123.262 151.199 122.078 150.02 122.078 148.559 cv
122.078 147.102 123.262 145.922 124.719 145.922 cv
126.18 145.922 127.359 147.102 127.359 148.559 cv
@
204.16 112.32 mo
204.16 113.777 202.977 114.961 201.52 114.961 cv
200.062 114.961 198.879 113.777 198.879 112.32 cv
198.879 110.863 200.062 109.68 201.52 109.68 cv
202.977 109.68 204.16 110.863 204.16 112.32 cv
f
204.16 112.32 mo
204.16 113.777 202.977 114.961 201.52 114.961 cv
200.062 114.961 198.879 113.777 198.879 112.32 cv
198.879 110.863 200.062 109.68 201.52 109.68 cv
202.977 109.68 204.16 110.863 204.16 112.32 cv
@
171.762 118.68 mo
171.762 120.137 170.578 121.32 169.121 121.32 cv
167.66 121.32 166.48 120.137 166.48 118.68 cv
166.48 117.223 167.66 116.039 169.121 116.039 cv
170.578 116.039 171.762 117.223 171.762 118.68 cv
f
171.762 118.68 mo
171.762 120.137 170.578 121.32 169.121 121.32 cv
167.66 121.32 166.48 120.137 166.48 118.68 cv
166.48 117.223 167.66 116.039 169.121 116.039 cv
170.578 116.039 171.762 117.223 171.762 118.68 cv
@
grestore
gsave
111 166 mo
285 166 li
285 86 li
111 86 li
cp
clp
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
175.961 114.359 mo
244.238 114.359 li
false sop
0 .919585 .825986 0 cmyk
@
175.961 116.281 mo
175.961 112.441 li
@
244.238 116.281 mo
244.238 112.441 li
@
210.039 133.559 mo
210.039 95.16 li
@
206.68 133.559 mo
213.52 133.559 li
@
206.68 95.16 mo
213.52 95.16 li
@
194.441 108 mo
284.078 108 li
@
194.441 110.16 mo
194.441 105.84 li
@
284.078 110.16 mo
284.078 105.84 li
@
239.32 129.359 mo
239.32 86.641 li
@
234.879 129.359 mo
243.762 129.359 li
@
234.879 86.641 mo
243.762 86.641 li
@
133.238 133.559 mo
171.641 133.559 li
@
133.238 135.359 mo
133.238 131.879 li
@
171.641 135.359 mo
171.641 131.879 li
@
152.441 150.719 mo
152.441 116.52 li
@
150.52 150.719 mo
154.359 150.719 li
@
150.52 116.52 mo
154.359 116.52 li
@
111.879 148.559 mo
137.559 148.559 li
@
111.879 150.238 mo
111.879 146.879 li
@
137.559 150.238 mo
137.559 146.879 li
@
124.719 165.602 mo
124.719 131.52 li
@
123.398 165.602 mo
125.922 165.602 li
@
123.398 131.52 mo
125.922 131.52 li
@
171.641 112.32 mo
231.398 112.32 li
@
171.641 114 mo
171.641 110.52 li
@
231.398 114 mo
231.398 110.52 li
@
201.52 129.359 mo
201.52 95.16 li
@
198.52 129.359 mo
204.52 129.359 li
@
198.52 95.16 mo
204.52 95.16 li
@
146.441 118.68 mo
191.68 118.68 li
@
146.441 120.359 mo
146.441 117 li
@
191.68 120.359 mo
191.68 117 li
@
169.121 135.719 mo
169.121 101.641 li
@
166.84 135.719 mo
171.398 135.719 li
@
166.84 101.641 mo
171.398 101.641 li
@
grestore
gsave
222 107 mo
403 107 li
403 53 li
222 53 li
cp
clp
227.68 103.68 mo
227.68 105.137 226.496 106.32 225.039 106.32 cv
223.582 106.32 222.398 105.137 222.398 103.68 cv
222.398 102.223 223.582 101.039 225.039 101.039 cv
226.496 101.039 227.68 102.223 227.68 103.68 cv
false sop
.75021 .679683 .670222 .90164 cmyk
f
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
227.68 103.68 mo
227.68 105.137 226.496 106.32 225.039 106.32 cv
223.582 106.32 222.398 105.137 222.398 103.68 cv
222.398 102.223 223.582 101.039 225.039 101.039 cv
226.496 101.039 227.68 102.223 227.68 103.68 cv
@
402.641 56.762 mo
402.641 58.219 401.457 59.398 400 59.398 cv
398.543 59.398 397.359 58.219 397.359 56.762 cv
397.359 55.301 398.543 54.121 400 54.121 cv
401.457 54.121 402.641 55.301 402.641 56.762 cv
f
402.641 56.762 mo
402.641 58.219 401.457 59.398 400 59.398 cv
398.543 59.398 397.359 58.219 397.359 56.762 cv
397.359 55.301 398.543 54.121 400 54.121 cv
401.457 54.121 402.641 55.301 402.641 56.762 cv
@
grestore
gsave
162 130 mo
499 130 li
499 35 li
162 35 li
cp
clp
.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
163.121 103.68 mo
286.961 103.68 li
false sop
.75021 .679683 .670222 .90164 cmyk
@
163.121 106.32 mo
163.121 101.16 li
@
286.961 106.32 mo
286.961 101.16 li
@
225.039 129.359 mo
225.039 78.121 li
@
218.801 129.359 mo
231.16 129.359 li
@
218.801 78.121 mo
231.16 78.121 li
@
301.84 56.762 mo
498.16 56.762 li
@
301.84 58.922 mo
301.84 54.602 li
@
498.16 58.922 mo
498.16 54.602 li
@
400 78.121 mo
400 35.398 li
@
390.16 78.121 mo
409.84 78.121 li
@
390.16 35.398 mo
409.84 35.398 li
@
grestore
false sop
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B82C9118> |-/parenleft <1C60D8A8C9B73549CF6B40D04D07825756F2238A99111E599049188A723DC8A42CDB66A727494A93521FFBD369D9FD84725F28202CD681326B8A7F800D5F08780190E8FE9D4B0D14E3> |-/parenright <1C60D8A8C9B73549CF526825BD3C8652422F83D98A359DA3FB8FCEE0E191ACD87C2FC972E0FB6CC9AAF9A61A32460B3B97A167D58918D2EA637753C6FE3D0C7E09FB857476BDD3AF942FEB> |-/I <1C60D8A8C9B845C86ED2F2EE2F0278A7DEB8A2> |-/S <1C60D8A8C9B66EAD07163FCA60C630F032777FD285D48F6DAD9EF16FB87120EBCBB23A0F9160ED8640A35536EB377E789327BB7815F99982CFB32C08616E1FB2F7E47C997D466BCF14309C092295B70EE0E581BC2C1183D3010DE8BBE0FE2F8F214FE8DDDF50C9D777618EF670E82BB78972DA3A805EACC520C59B559422BE486DF81F3159CCF5E2A8B178AA8742D1D9DFCA81CF113A44D871F09BFBBF466BE227E778B18DA0BA7E0C2ABFD95972726E670F113AB3E02DCDFD58D727CD118347F4> |-/V <1C60D8A8C9B6218486B17D373C9F37E3E8B4EE906D865C8250124EC6C1375C7C376ECBE65F> |-/a <1C60D8A8C9B7D61BC4E32CBE09BCF0ECB0904296757F04E77F155C4B9FB224D301A306131F7F82E06D303373DBE173795A6FA39FE6BD2AC2DD9B216D5149D3087179890D616D5D9AEB07EE2481A11D2DD974671ADB0E70153C2DB17960443B9F14C4BADBB95734241BFF0FE1EEDCB7238440DD8C21279D0CE3E9BE9E041FE04771764FF53376F49B556A7E7A4AAFDD95861D828BA6901109EC7B8B79FABFC461969F2FCEBBE1A4251A45C5CECBC379E3AA> |-/b <1C60D8A8C9B66EAD077A9F7C3B436B78F2484E26573F74CBD8E11CA84CDE28500B0BC24808863818EF7AB6DB976D5D25F190AD2E1D1E56D2BE88DB9930FA1EB155C0328757A5E8E3EFE08CEDFEA5BD3215EF022E29E4648E9B43873995FB2AE21E615C6582D031DA32021DE5072B461E5F7DE4257398B7B92DBC644E5EB72D4F0459C9533C6835F01D063ECD084A> |-/c <1C60D8A8C9B795A0BE8F3F3D4C301BC796B54988BF43B62ABD2C8F94E25D16582B9047260E97B0090161AEE84647CBADCF97C45EB3810355C7A019FA9C607C1513FEB3B436667C285945FA7AEC31E09B7177490E8CFF294F9C4E476752AB4CF8BF2B9BCAB8CDC1E65FF1D868B8A0610FE9961192E1F69528E301E98881BE5D7B5637A4> |-/d <1C60D8A8C9B66EAD073A35CD77E79F171ADE4972E633948623BB31E53C295AB32A5B902DA2C311E11FFF0D8E58DE1D72FD9FD2559A99A128820E27E287496A9B781EF6986D54349CA050B9F5B0155D41D3DB0F26E09CEFE6CB6CA87502C70383B7DD882C012C8708ECB6311FDC77EFF063025B9B78EC75558B745980EFFFC1093D7B79F8AC4BEADBAC046EF38180EFD7> |-/e <1C60D8A8C9B7D4743439F06FD0629ECE31DC8576BBAD323C73DB61CC597B94A662150FD8A386970506E352F2C9FBC318DE7B483C58747073EFC457546DA8C941DB62563EEA8722D77B27D969D7BA3D4F7F7FA54D8C96972F61886CE3F8D3E81B49C6D7D77FF197C5277C8F007C6BED0A8415D83083FE7321BFEA10E28E0D5FD5B22C3D8FDD7CFB8930D11484> |-/g <1C60D8A8C9B66EAD071AF796609F287EEEA7C15DEFEFCE4F8E68BCB1F3F2D4D9F8091A2A34779D7F458A35EE9A47EB50C3C203AB7A9C8071B5CA60B417930222B2155DF8632EA333405C9E8D256F68EF3B6CE9F3A9C3C866BF77273E95CB9A1B76858C8EB4675369BE141259EA5E399079418C987CB9FDBD59134F9D4396947BF9FBA1BE9CF6F685530771FE9DB0AB0DEE5FEB09DB13759C227CC3F016BAA3FB5C4030FFF6E1616C260C4B376D8AD6C0287F4F318917DFBEF949E438EDF53DBED21CCBA179> |-/i <1C60D8A8C9B854D0EA354333C26DB1E7765FEAED7F54F17FFD3585B7E3> |-/l <1C60D8A8C9B854D0EA354333C32545BEAE3B78> |-/n <1C60D8A8C9B66F631652DE37E21E2AEFAAC780E0574FDA25EB0818BC79D5F62493D28EC249B3F8E1511A67C4E8748ECD5A2754F72BAD6CFD0B2469AD470CF92A3873DC9018BE25C069AA3CCFAEB0C3C95C19E14CDE981975F12919> |-/r <1C60D8A8C9B7008A52C0014283E3209C372AB3014E5F6C617BBBDFA1A1DC4F5370E2DB2712BC31E10541B9BED7A965FF9E82EEB9FC899FB91D8B86181E590323FD1A598D7C602112A0EABC47EB5557992D2BF3> |-/s <1C60D8A8C9B7B202AAED8828242BC412A1E2659E84CCB9E5934ADBCE7303C19BDE1C6C688E12AD4FADCDC61E30C4AFFBDEE89B4E9C1BD96C3D77C3DF7FD49CC4EB411E35CBA56AC47D7DD35E1987C7C498C73C5D9B6398147A1BC8FED85895736A3946EC471E7728A1B1DDDF58EDFE2FFE644319D42761A7A33C4F8238117EB333B57E34B310DE6F5CBFB4E1DD721FCC13C357520F561B752B3CA39F613875AB203A579D73F13DC3D5EEC28C8EBDD28E508DBEB5D76F1EAE8CEC0EE6DC718D6C4B> |-/t <1C60D8A8C9B733AAD272625FE9BE3651677EB4B1BC3E6FD330B64603569B667933706BD44B9F327F3C5B70F9BA5519786A75BC5954907EE04575FBBA04E7734420B82D6FBB406300CB69> |-/u <1C60D8A8C9B66F63195CBEB820E96FD829EB5856833D5EE97D8C500EAAFE3BE48D024936B7D7B12FAD0A928BFE4DA7C307428D9925D0D9B4700B85B0408DB9B0D2E8184CC8E66B83758E50CA96FEB02FED047776B8780747EAD3> |-/x <1C60D8A8C9B7CB3569156844625FD671FBCB828363601408258549EA36F8C560354ADD465C24EB607B5F94B97D3E2112D7E39C35BAF6712D90466A5329> |-/y <1C60D8A8C9B7CB35699C946C509ED615117CEAD752853439CE8C86C0506F6F6A78DAE60E0788B521BEDCB595443B5B769E7E832F06301F27D93D2090668431E62975EEE39C08E8> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 73 /I putdup 83 /S putdup 86 /V putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 103 /g putdup 105 /i putdup 108 /l putdup 110 /n putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 120 /x putdup 121 /y putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 15{/.notdef}rp /I 9{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp /a /b /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [14 0 0 -14 0 0 ]msf182.402 261.72 mo(Variability V \(std units\))[9.57608 8.56799 5.75394 3.8779 8.56799 8.87604 3.8779 3.8779 3.8779 5.48798 8.27405 4.43803 9.57605 4.43805 5.45996 7.28009 5.48798 8.87604 4.43799 8.86194 8.86194 3.87793 5.48798 7.28003 0 ]xsh%ADOBeginSubsetFont: DAHQMX+Verdana-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (DAHQMX+Verdana)%%Title: (DAHQMX+Verdana Adobe Identity 0)%%Version: 0/CIDInit /ProcSet findresource begin14 dict begin/CIDFontName /DAHQMX+Verdana def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Identity) def/Supplement 0 defend def/FontBBox {-560 -303 1447 1051} def/FontInfo 4 dict dup begin/FSType 4 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 2 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 1 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 7 dict dup begin/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 2 dict defct_GlyphDirProcs beginGlyphDirectory+0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7A7EE2F631B34F7BA2033FD0FF> |1 <001C60D8A8C9B6612940F5C0FF63B6AFF05EEEA73C21AC849225E04B1F2256DC20666E47519F819D590B15535E29841F401D350B8E0EB69CFE8D9A179C849925AE0DB0AA784B4E8D1F58BF60C4DF06EB2C4C526A86C670B0AB235B556015A2ED55FD7034573660E71E0187132056189BC47949AC34A5BE91FDE7AFBB081C6D3DD897611F74928F2AAB627807557D7C7B1772A1E8FA57D7D84EADED6DF396A67F6049D6B11BCE620790970A39B229C4D33C6F19160A7A0022A5278E2ACFBEE7250D21FAC3C22348853832CD7FBC38DFE8EFE96E748BD3943ADDE9861680CE8C3A0A4934917B8AC81FDF9734BA1FC51DD1260E7F0ACE7C7BBA6CAEA089EB37947F5E8222C71153C00A> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /DAHQMX+Verdana-Identity-H /Identity-H 0 [/DAHQMX+Verdana] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IAACHL+Verdana /DAHQMX+Verdana-Identity-H findfont ct_VMDictPutIAACHL+Verdana [0 -14 -14 0 0 0 ]msf21.1602 123.526 mo(\000\001)shIAACHK+BitstreamVeraSans-Roman*1 [0 -14 -14 0 0 0 ]msf22.2402 221.568 mo(Scaling Index )[-8.87604 -7.68593 -8.56799 -3.8779 -3.8779 -8.86194 -8.87604 -4.43802 -4.11609 -8.86194 -8.87604 -8.61008 -8.27405 0 ]ysh%ADOBeginSubsetFont: BFHAAA+Verdana Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /BFHAAA+Verdana def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-560 -303 1447 1051} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7A7EE2F631B34F7BA2033FD0FF> |-/space <1C60D8A8C9B80A3F7B> |-/parenleft <1C60D8A8C9B775D2B341C21DA2A884E3C7F0764F0F35F96579A1602625F649C565E3C1A29956CDEBA92AA4B76E1AE845942D9D6EB6D712A10CBE2CA322B3DFD5937E232F87F80DD05033216DB93907E2E67A7207B48E33142034627AD632D34AFED689957DDBF302ACA032> |-/parenright <1C60D8A8C9B775D2BC47856266CF9FF80F00CE03B3C96842A0F928CA3D35FE356C0C870B3E169ECC055A33553BA773FD53D9AD90047D2D18F23474FFDB950A70FBF516710B6CE6176060D181106E1106B7593C540FD46A2E0EC042CAB4B771A3593005DB678F79697C3F2BD755> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IAACHM+Verdana /BFHAAA+Verdana findfont ct_VMDictPut/IAACHM+Verdana*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]IAACHM+Verdana nfIAACHM+Verdana*1 [0 -14 -14 0 0 0 ]msf22.2402 114.498 mo( \()[-4.91397 0 ]yshIAACHK+BitstreamVeraSans-Roman*1 [0 -14 -14 0 0 0 ]msf22.2402 103.219 mo(std units)[-7.28006 -5.48798 -8.87604 -4.43802 -8.86194 -8.86194 -3.8779 -5.48798 0 ]yshIAACHM+Verdana*1 [0 -14 -14 0 0 0 ]msf22.2402 42.6797 mo(\))sh%ADOBeginSubsetFont: XWABAA+Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /XWABAA+Helvetica def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 47 /slash putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/slash <1C60D8A8C9B854D08FD42DCC2A61292225078A8A43> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IAACHN+Helvetica /XWABAA+Helvetica findfont ct_VMDictPut/IAACHN+Helvetica*1 [47{/.notdef}rp /slash 208{/.notdef}rp]IAACHN+Helvetica nfIAACHN+Helvetica*1 [15 0 0 -15 0 0 ]msf287.92 234.96 mo(//)[4.15488 0 ]xsh287.92 21.48 mo(//)[4.15488 0 ]xsh388.84 122.281 mo
501.879 122.281 li
501.879 224.879 li
388.84 224.879 li
cp
0 0 0 0 cmyk
ef
.4 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
388.84 122.281 mo
501.879 122.281 li
501.879 224.879 li
388.84 224.879 li
cp
@
388.84 224.879 mo
501.879 224.879 li
.75021 .679683 .670222 .90164 cmyk
@
388.84 122.281 mo
501.879 122.281 li
@
388.84 224.879 mo
388.84 122.281 li
@
501.879 224.879 mo
501.879 122.281 li
@
388.84 224.879 mo
501.879 224.879 li
@
388.84 224.879 mo
388.84 122.281 li
@
388.84 224.879 mo
501.879 224.879 li
@
388.84 122.281 mo
501.879 122.281 li
@
388.84 224.879 mo
388.84 122.281 li
@
501.879 224.879 mo
501.879 122.281 li
@
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/H <1C60D8A8C9B6E5994B339199BEC413C5760FD4FE2C2BF86F2CB8C3EBD16F0BBC8EA92DF796D506103A> |-/Z <1C60D8A8C9B620B7C77AC5805D0AA3F34D001CF1EF22D1A5183F570E891A8A18F0669EA974D67F4EE3FA> |-/f <1C60D8A8C9B80A3F82F7C504526A91647AA69535F03D0BFE7E7EF26E37F6175D5F9735D6302C331267582FA6733B4876CFDE1F1B2CCCF2EBBDDF9DCB95DC0F20FED3664DC164E3AE52> |-/h <1C60D8A8C9B66F631652DE37E21E2AEFAAC780E0574FDA25EB0818BC79D5F62493D2991AA46C400CC311064031BFF352FA45BA51ABCD9B2E12773AE4FBE225B1A5B817EC4ED00B54D2D076566A61F076E7604D9A478B470C74ED5459> |-/o <1C60D8A8C9B7D7E8DCDC34B170DE603DE72E927B1A297F32C611332BD6232AEB21C7800DA95C473D093B278AA572B284E02B8C18DEC021C9DF2466DB4A818DEA2564F123E85624B053403483A6C0510A5DD208335E5F64D74A599DEE538E1E9C336C8CCF5A782410E5F88DC00FA2405E99D22EF9DC352A076B4AD5723102C4FCF4386719> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 72 /H putdup 90 /Z putdup 102 /f putdup 104 /h putdup 111 /o putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 14{/.notdef}rp /H /I 9{/.notdef}rp /S 2{/.notdef}rp /V 3{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 133.92 mo(Zone of Health)[4.79999 6.53992 6.08997 6.50003 2.76004 6.53992 3.14005 2.76001 6.83008 6.49005 6.82999 1.98993 3.38998 0 ]xshgsave
394 135 mo
426 135 li
426 125 li
394 125 li
cp
clp
394.961 125.641 mo
425.559 125.641 li
425.559 134.641 li
394.961 134.641 li
cp
.297246 .156161 .0367437 0 cmyk
ef
.5 lw
394.961 125.641 mo
425.559 125.641 li
425.559 134.641 li
394.961 134.641 li
cp
@
grestore
gsave
429 147 mo
487 147 li
487 138 li
429 138 li
cp
clp
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/K <1C60D8A8C9B6459DB36C56EABB4E3235770B1EDC24E972FDA698B6F806A06FA468AAED3DD332CDA45EA3FC3E354CBAA0> |-/k <1C60D8A8C9B7F88C3A8F6B371FDA5152A5BCEE35B1A796798A1DFB5E695774C0FFC0CA955B519DB1E1C93323A05C1712> |-/w <1C60D8A8C9B6A79B2A477DCF651A161ED0C8AB226434ADF153CC18F6CCA322DC7D184DF09CA4AD6765B9AD33847AC6121D3881F8FC8DA5B10ED4> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 75 /K putdup 107 /k putdup 119 /w putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 14{/.notdef}rp /H /I /.notdef /K 7{/.notdef}rp /S 2{/.notdef}rp /V 3{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 146.4 mo(Kwashiorkor)[5.89999 8.30002 6.82999 3.87003 6.08997 1.98993 6.53992 3.00995 5.01996 6.53992 0 ]xshgrestore
gsave
406 147 mo
414 147 li
414 138 li
406 138 li
cp
clp
410.199 146.52 mo
413.199 142.559 li
410.199 138.602 li
407.199 142.559 li
410.199 146.52 li
.883665 .769161 0 0 cmyk
ef
.5 lw
410.199 146.52 mo
413.199 142.559 li
410.199 138.602 li
407.199 142.559 li
cp
@
grestore
gsave
429 159 mo
476 159 li
476 151 li
429 151 li
cp
clp
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6F715E618209484160018F27113D6559D092F6F2A08EEB9D5AEBDD656910F67DC5C613903B297B19867A27268DE296E49220D27AAE601181A4C105C17E345674279BC7C9E2BA56E4D4662CDFF03B6C528C476DB31C64D> |-/P <1C60D8A8C9B7C054193B217295353D98DF9F79E85484D6726152D475A2D0EC9D79F6611A436CF5C39A7FA79A187E6BFD15DEB664E55718069A1D00F4339F92AE034CE6A3CAC9A7E7A091855197A7F9F0746F0E342EE43586A6C0979272> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 68 /D putdup 80 /P putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 10{/.notdef}rp /D 3{/.notdef}rp /H /I /.notdef /K 4{/.notdef}rp /P 2{/.notdef}rp /S 2{/.notdef}rp /V 3{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 158.76 mo(Plant Diet)[5.91998 1.9899 6.82001 6.09995 3.38 2.77002 7.44003 1.98993 6.50006 0 ]xshgrestore
gsave
407 158 mo
413 158 li
413 152 li
407 152 li
cp
clp
407.801 152.52 mo
412.602 152.52 li
412.602 157.321 li
407.801 157.321 li
cp
.853666 .140993 .973449 .0191043 cmyk
ef
.5 lw
407.801 152.52 mo
412.602 152.52 li
412.602 157.321 li
407.801 157.321 li
cp
@
grestore
gsave
428 172 mo
485 172 li
485 163 li
428 163 li
cp
clp
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B6218486E34B39F04D315C2747730304C3B2705B577812C8D10F41D564C797A6E45EC9E706D93382EDDA7E494B227F> |-/m <1C60D8A8C9B5F0D466C0DD43AC0E99B510F95477EF3913394A6DB8A0065F723425CBFBDAFA3DE5051794D9AC7F5A97A9BE0A337243F3026DEC639F4603BFD4B2CA2B4A51E537AABB93DE2C2CBD5B78FCF27EB14E32A824EBBF2D1F16C62F41AF92BA137F11A72D24CC7D8538E88AEB893AF88334C7524E4C0359B3A8A1E4074CFD2D336B8D01C817EFCFD5CED4140A079336229C624DBB244C21CF> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 65 /A putdup 109 /m putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H /I /.notdef /K 4{/.notdef}rp /P 2{/.notdef}rp /S 2{/.notdef}rp /V 3{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 171.12 mo(Animal Diet)[7.40005 6.08997 1.98993 9.37997 6.82001 1.99994 2.76001 7.44003 1.98993 6.50003 0 ]xshgrestore
gsave
407 170 mo
413 170 li
413 164 li
407 164 li
cp
clp
407.801 164.879 mo
412.602 164.879 li
412.602 169.68 li
407.801 169.68 li
cp
.627649 0 1 0 cmyk
ef
.5 lw
407.801 164.879 mo
412.602 164.879 li
412.602 169.68 li
407.801 169.68 li
cp
@
grestore
gsave
429 184 mo
454 184 li
454 176 li
429 176 li
cp
clp
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/O <1C60D8A8C9B6C698DCD50E8D9940718DAF0AB15DF16576C2699E8E168A7179CFE1608512EBC51CDA842B23C16302887D724398354CDCE4FC339DFAB3D9DC05B2F686C5E98883FD21A28A38F36A90143ECB92675EEAEA32458F9A95BCF30FEC03C9A4E448523FA0E173CD1527FFB11F12FF4D912E4D303E57460AEB71490C77EE44C9879FD9A39F3E> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 79 /O putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H /I /.notdef /K 3{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V 3{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 183.6 mo(Ob III)[8.69003 6.81003 2.76001 2.25006 2.25006 0 ]xshgrestore
gsave
407 184 mo
415 184 li
415 175 li
407 175 li
cp
clp
408.16 183.238 mo
414.16 179.762 li
408.16 176.281 li
408.16 183.238 li
0 .241001 .107607 0 cmyk
ef
.5 lw
408.16 183.238 mo
414.16 179.762 li
408.16 176.281 li
cp
@
grestore
gsave
429 197 mo
477 197 li
477 188 li
429 188 li
cp
clp
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 195.96 mo(Ob III Diet)[8.69003 6.81003 2.76001 2.25006 2.25006 2.25006 2.77002 7.44003 1.98993 6.50006 0 ]xshgrestore
gsave
407 197 mo
415 197 li
415 188 li
407 188 li
cp
clp
408.16 195.602 mo
414.16 192.121 li
408.16 188.641 li
408.16 195.602 li
.360113 .879362 0 0 cmyk
ef
.5 lw
408.16 195.602 mo
414.16 192.121 li
408.16 188.641 li
cp
@
grestore
gsave
428 209 mo
480 209 li
480 200 li
428 200 li
cp
clp
IAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 208.32 mo(Antibiotics)[7.40005 6.08997 3.38998 1.98993 6.81003 1.99991 6.53992 3.39001 1.98993 6.45996 0 ]xshgrestore
gsave
406 208 mo
414 208 li
414 201 li
406 201 li
cp
clp
413.199 204.48 mo
413.199 206.137 411.855 207.48 410.199 207.48 cv
408.543 207.48 407.199 206.137 407.199 204.48 cv
407.199 202.824 408.543 201.48 410.199 201.48 cv
411.855 201.48 413.199 202.824 413.199 204.48 cv
0 .919585 .825986 0 cmyk
f
.5 lw
413.199 204.48 mo
413.199 206.137 411.855 207.48 410.199 207.48 cv
408.543 207.48 407.199 206.137 407.199 204.48 cv
407.199 202.824 408.543 201.48 410.199 201.48 cv
411.855 201.48 413.199 202.824 413.199 204.48 cv
@
grestore
gsave
429 221 mo
443 221 li
443 213 li
429 213 li
cp
clp
%ADOBeginSubsetFont: OTRPMX+BitstreamVeraSans-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginIAACHK+BitstreamVeraSans-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B6232B185C9C387D5A2F14F5DE3EFB3B33783407668EC848EFD82DC8A9A2F86266DE12F6631CEEC634926ED2DC5492A7CBA71EC68AC165165D2EF1AA58824C9414E891B99B6A812D8276764D07A67EFEFE30A406C82FFD0EE4D84085B501663BAE4E54938F8D1EF859C4F00C968A5766647B2B6C87ECE9D9939CDCDB7B70530253A1CE721C0EF1F31B6B266C20E1C239179AB10F473BA8> |-systemdict /gcheck known {setglobal} if end {end} ifendIAACHK+BitstreamVeraSans-Roman /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/IAACHK+BitstreamVeraSans-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A /B /.notdef /D 3{/.notdef}rp /H /I /.notdef /K 3{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V 3{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /t /u /.notdef /w /x /y 134{/.notdef}rp]IAACHK+BitstreamVeraSans-Roman nfIAACHK+BitstreamVeraSans-Roman*1 [10 0 0 -10 0 0 ]msf428.68 220.8 mo(IBS)[2.25006 5.74005 0 ]xshgrestore
gsave
406 221 mo
414 221 li
414 213 li
406 213 li
cp
clp
413.199 216.84 mo
413.199 218.496 411.855 219.84 410.199 219.84 cv
408.543 219.84 407.199 218.496 407.199 216.84 cv
407.199 215.184 408.543 213.84 410.199 213.84 cv
411.855 213.84 413.199 215.184 413.199 216.84 cv
f
.5 lw
413.199 216.84 mo
413.199 218.496 411.855 219.84 410.199 219.84 cv
408.543 219.84 407.199 218.496 407.199 216.84 cv
407.199 215.184 408.543 213.84 410.199 213.84 cv
411.855 213.84 413.199 215.184 413.199 216.84 cv
@
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/IAACHN+Helvetica*1 uf/IAACHN+Helvetica uf/XWABAA+Helvetica uf/IAACHJ+BitstreamVeraSans-Roman-Identity-H uf/IAACHJ+BitstreamVeraSans-Roman /CIDFont ur/IAACHK+BitstreamVeraSans-Roman*1 uf/IAACHK+BitstreamVeraSans-Roman uf/OTRPMX+BitstreamVeraSans-Roman uf/IAACHL+Verdana-Identity-H uf/IAACHL+Verdana /CIDFont ur/IAACHM+Verdana*1 uf/IAACHM+Verdana uf/BFHAAA+Verdana ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
